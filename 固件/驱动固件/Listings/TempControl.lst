C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/18/2025 14:33:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TEMPCONTROL
OBJECT MODULE PLACED IN .\Objects\TempControl.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Logic\TempControl.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODDP2 INCDIR(.\StdDri
                    -ver\inc;.\Hardware;.\include\Hardware;.\include\Logic;.\include\Middleware;.\include\System) DEFINE(EnableStdGPIO) DEBUG
                    - PRINT(.\Listings\TempControl.lst) TABS(2) OBJECT(.\Objects\TempControl.obj)

line level    source

   1          #include "ADCCfg.h"
   2          #include "LEDMgmt.h"
   3          #include "delay.h"
   4          #include "ModeControl.h"
   5          #include "TempControl.h"
   6          #include "BattDisplay.h"
   7          #include "OutputChannel.h"
   8          #include "PWMCfg.h"
   9          #include "LowVoltProt.h"
  10          #include "SelfTest.h"
  11          
  12          //ÄÚ²¿±äÁ¿
  13          static xdata int TempIntegral;
  14          static xdata int TempProtBuf;
  15          static char StepDownTIM;  //½µµµÏÔÊ¾¼ÆÊ±
  16          static unsigned char StepUpLockTIM; //¼ÆÊ±Æ÷
  17          
  18          //ÄÚ²¿×´Ì¬Î»
  19          static bit IsThermalStepDown; //±ê¼ÇÎ»£¬ÊÇ·ñ½µµµ
  20          static bit IsTempLIMActive;  //ÎÂ¿ØÊÇ·ñÒÑ¾­Æô¶¯
  21          static bit IsSystemShutDown; //ÊÇ·ñ´¥·¢ÎÂ¿ØÇ¿ÖÆ¹Ø»ú
  22          
  23          //Íâ²¿×´Ì¬Î»
  24          bit IsDisableTurbo;  //½ûÖ¹ÔÙ¶È½øÈëµ½¼«ÁÁµµ
  25          bit IsForceLeaveTurbo; //ÊÇ·ñÇ¿ÖÆÀë¿ª¼«ÁÁµµ
  26          
  27          //ÄÚ²¿ºê¶¨Òå
  28          #define MinumumILED CalcIREFValue(ILEDStepDown)
  29          
  30          //»»µ²µÄÊ±ºò¸ù¾İµ±Ç°ºãÎÂµÄµçÁ÷ÖØĞÂPIÖµ
  31          void RecalcPILoop(int LastCurrent)  
  32            {
  33   1        int buf,ModeCur;
  34   1        //Ä¿±êµ²Î»²»ĞèÒª¼ÆËã,¸´Î»±ÈÀı»º´æ
  35   1        if(!CurrentMode->IsNeedStepDown)TempProtBuf=0;
  36   1        //ĞèÒª¸´Î»£¬Ö´ĞĞ¶ÔÓ¦´¦Àí
  37   1        else
  38   1          { 
  39   2          //»ñÈ¡µ±Ç°µ²Î»µçÁ÷
  40   2          ModeCur=QueryCurrentGearILED();
  41   2          //¼ÆËãPÖµ»º´æ
  42   2          buf=TempProtBuf+(TempIntegral/IntegralFactor); //¼ÆËãµçÁ÷¿Û¼õÖµ
  43   2          if(buf<0)buf=0; //µçÁ÷¿Û¼õÖµ²»ÄÜĞ¡ÓÚ0
  44   2          buf=LastCurrent-buf; //¾Éµ²Î»µçÁ÷¼õÈ¥¿Û¼õÖµµÃµ½Êµ¼ÊµçÁ÷(mA)
  45   2          TempProtBuf=ModeCur-LastCurrent; //PÖµ»º´æµÈÓÚĞÂµ²Î»µÄµçÁ÷-¾Éµ²Î»Êµ¼ÊµçÁ÷(mA)
  46   2          if(TempProtBuf<0)TempProtBuf=0; //²»ÔÊĞí±ÈÀı»º´æĞ¡ÓÚ0
  47   2          }
  48   1        //Çå³ı»ı·ÖÆ÷»º´æ
  49   1        TempIntegral=0;
  50   1        }
  51            
  52          //Êä³öµ±Ç°ÎÂ¿ØµÄÏŞÁ÷Öµ
  53          int ThermalILIMCalc(void)
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/18/2025 14:33:18 PAGE 2   

  54            {
  55   1        int result;
  56   1        //ÅĞ¶ÏÎÂ¿ØÊÇ·ñĞèÒª½øĞĞ¼ÆËã
  57   1        if(!IsTempLIMActive)result=Current; //ÎÂ¿Ø±»¹Ø±Õ£¬µçÁ÷ÏŞÖÆ½øÀ´¶àÉÙ·µ»ØÈ¥¶àÉÙ
  58   1        //¿ªÊ¼ÎÂ¿Ø¼ÆËã
  59   1        else
  60   1          {
  61   2          result=TempProtBuf+(TempIntegral/IntegralFactor); //¸ù¾İ»º´æ¼ÆËã½á¹û
  62   2          if(result<0)result=0; //²»ÔÊĞí¸ºÖµ³öÏÖ
  63   2          result=Current-result; //¼ÆËãÏŞÁ÷Öµ½á¹û
  64   2          if(result<MinumumILED) //ÒÑ¾­µ÷µ½µ×ÁË£¬½ûÖ¹PID¼ÌĞøÀÛ¼Ó
  65   2            {
  66   3            TempProtBuf=Current-MinumumILED; //½«±ÈÀıÊä³ö½á¹ûÏŞ·ùÎª×îĞ¡µçÁ÷
  67   3            TempIntegral=0;
  68   3            result=MinumumILED; //µçÁ÷ÏŞÖÆ²»ÔÊĞíĞ¡ÓÚ×îµÍµçÁ÷
  69   3            }
  70   2          }
  71   1        //·µ»Ø½á¹û  
  72   1        IsThermalStepDown=result==Current?0:1; //Èç¹ûÊäÈëµÈÓÚÊä³ö£¬Ôò½µµµÃ»·¢Éú
  73   1        return result; 
  74   1        }
  75          //»ñÈ¡ÎÂ¿Ø»·Â·µÄºãÎÂÖµ
  76          static int QueryConstantTemp(void)  
  77            {
  78   1        //¼«ÁÁµÄÊ±ºòÊ¹ÓÃ¸ü¸ßµÄÎÂ¿ØÀ­³¤½µµµÊ±¼ä
  79   1        return CurrentMode->ModeIdx==Mode_Turbo?TurboConstantTemperature:ConstantTemperature;
  80   1        }
  81            
  82          //»ñÈ¡ÎÂ¿Ø»·Â·µÄ³£ÁÁµçÁ÷ÅäÖÃ
  83          static int QueryConstantILED(void)
  84            {
  85   1        return CurrentMode->ModeIdx==Mode_Turbo?CalcIREFValue(ILEDConstantGlowMinTurbo):CalcIREFValue(ILEDConstan
             -tGlowMin);
  86   1        }
  87          
  88          //ÎÂ¿ØPI»·¼ÆËã
  89          void ThermalPILoopCalc(void)  
  90            {
  91   1        int ProtFact,Err;
  92   1        //PI»·¹Ø±Õ£¬¸´Î»ÊıÖµ
  93   1        if(!IsTempLIMActive)
  94   1          {
  95   2          TempIntegral=0;
  96   2          TempProtBuf=0;
  97   2          IsThermalStepDown=0;
  98   2          }
  99   1        //½øĞĞPI»·µÄ¼ÆËã(½öÔÚÊä³ö¿ªÆôµÄÊ±ºò½øĞĞ»òÕß±¬ÉÁÄ£Ê½ÔËĞĞ¹ı³ÌÖĞÇ¿ÖÆ½øĞĞ)
 100   1        else if(GetIfOutputEnabled()||CurrentMode->ModeIdx==Mode_Strobe)
 101   1          {
 102   2          //»ñÈ¡ºãÎÂÎÂ¶ÈÖµ
 103   2          ProtFact=QueryConstantTemp();
 104   2          //ÎÂ¶ÈÎó²îÎªÕı
 105   2          if(Data.Systemp>ProtFact)
 106   2            {
 107   3            //¼ÆËãÎó²î
 108   3            Err=Data.Systemp-ProtFact;  //Îó²îÖµµÈÓÚÄ¿±êÎÂ¶È-ºãÎÂÎÂ¶È
 109   3            //±ÈÀıÏî(P)
 110   3            StepUpLockTIM=24; //ÉıµµÖ®ºóÎÂ¶È¹ı¸ßÔòÖ®ºóÍ£Ö¹3Ãë
 111   3            if(Err>2)
 112   3              {
 113   4              //±ÈÀıÏîÌá½»
 114   4              ProtFact=(CurrentBuf/2300)+1;
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/18/2025 14:33:18 PAGE 3   

 115   4              if(Data.Systemp>(ForceDisableTurboTemp-5))ProtFact*=5; //ÎÂ¶È¹ı¸ß£¬À©ÕÅ±ÈÀıÏµÊı
 116   4              //µ±Ç°LEDµçÁ÷ÒÑ±»ÏŞÖÆµ½³£ÁÁµçÁ÷·¶Î§ÄÚ£¬×èÖ¹¿ìËÙ½µµµ
 117   4              if(CurrentBuf<QueryConstantILED())  
 118   4                {
 119   5                //»ı·ÖÆ÷Ò»Ö±ÀÛ¼Ó¼ÓÂúÁË£¬Ó¦ÓÃÒ»´ÎÊä³öµçÁ÷²¢ÇåÁã»ı·ÖÆ÷
 120   5                if(TempIntegral==(SlowStepDownTime*8))
 121   5                  {
 122   6                  TempProtBuf+=((SlowStepDownTime*8)/IntegralFactor);
 123   6                  TempIntegral=0;
 124   6                  }
 125   5                }
 126   4              //µçÁ÷Ã»ÓĞ´ïµ½³£ÁÁÏÂÏŞ£¬¼ÌĞøÌá½»µçÁ÷ÉèÖÃ
 127   4              else TempProtBuf+=(ProtFact*Err); //ÏòbufÌá½»±ÈÀıÏî 
 128   4              //ÏŞÖÆ±ÈÀıÏî×î´óÖ»ÄÜ´ïµ½ILEDMIN
 129   4              if(TempProtBuf>(CurrentMode->Current-MinumumILED))TempProtBuf=(CurrentMode->Current-MinumumILED); 
 130   4              StepUpLockTIM=60; //´¥·¢±ÈÀıÏî½µµµ£¬Í£7.5Ãë
 131   4              }
 132   3            //»ı·ÖÏî(I)
 133   3            if(TempIntegral<IntegrateFullScale)TempIntegral++;
 134   3            }
 135   2          //ÎÂ¶ÈĞ¡ÓÚºãÎÂÖµ
 136   2          else if(Data.Systemp<ProtFact)
 137   2            {
 138   3            //¼ÆËãÎó²î
 139   3            Err=ProtFact-Data.Systemp;   //Îó²îµÈÓÚ±ÈÀı¼õ»ı·Ö 
 140   3            //±ÈÀıÏî
 141   3            if(StepUpLockTIM)StepUpLockTIM--; //µ±Ç°´¥·¢½µµµ»¹Ã»´ïµ½¿ìËÙÉıµµµÄÊ±¼ä
 142   3            else
 143   3              {
 144   4              //µçÁ÷´ïµ½»ØÉıÏŞÖÆÖµ£¬¿ªÊ¼Ê¹ÓÃ»ı·ÖÆ÷¼à²â»ºÂı»ØÉı
 145   4              if(CurrentBuf>(QueryConstantILED()-CalcIREFValue(1500)))  
 146   4                {
 147   5                //»ı·ÖÆ÷Ò»Ö±ÀÛ¼Ó¼ÓÂúÁË£¬Ó¦ÓÃÒ»´ÎÊä³öµçÁ÷²¢ÇåÁã»ı·ÖÆ÷
 148   5                if(TempIntegral==-(ILEDRecoveryTime*8))
 149   5                  {
 150   6                  TempProtBuf-=((ILEDRecoveryTime*8)/IntegralFactor);
 151   6                  TempIntegral=0;           
 152   6                  }
 153   5                }
 154   4              //Ö´ĞĞ±ÈÀıÉıÎÂ
 155   4              else
 156   4                {
 157   5                if(Err&0x7E)TempProtBuf-=Err; //½øĞĞÉıµµ
 158   5                if(TempProtBuf<0)TempProtBuf=0;
 159   5                }
 160   4              }
 161   3            //±ÈÀıÏîÊıÖµÏŞ·ù(²»ÄÜÊÇ¸ºÊı)
 162   3            if(TempProtBuf<0)TempProtBuf=0; 
 163   3            //»ı·ÖÏî
 164   3            if(TempIntegral>(-IntegrateFullScale))TempIntegral--;   
 165   3            }
 166   2          }
 167   1        }
 168          //ÏÔÊ¾ÎÂ¶È¿ØÖÆÆô¶¯
 169          bit ShowThermalStepDown(void) 
 170            {
 171   1        StepDownReasonDef Reason;
 172   1        //ÅĞ¶ÏÏµÍ³ÊÇ·ñÔÚ½µµµ
 173   1        if(VshowFSMState!=BattVdis_Waiting)Reason=StepDown_OFF; //µ±Ç°´¦ÓÚµçÁ¿ÏÔÊ¾×´Ì¬²»ÔÊĞí´ò¶Ï
 174   1        else if(IsThermalStepDown)Reason=StepDown_Thermal; //ÎÂ¿Ø½µµµ´¥·¢
 175   1        else if(CurrentMode->ModeIdx==Mode_Turbo&&TurboILIM<QueryCurrentGearILED())Reason=StepDowm_BattAlert; //µ
             -ç³Ø³Å²»×¡
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/18/2025 14:33:18 PAGE 4   

 176   1        else Reason=StepDown_OFF;
 177   1        //½øĞĞ½µµµ´¦Àí
 178   1        switch(Reason)    
 179   1          {
 180   2          case StepDown_OFF:StepDownTIM=0;break; //ÌáÊ¾Î´´¥·¢
 181   2          case StepDowm_BattAlert: //µç³Ø¾¯±¨
 182   2            //µ±¼ÆÊ±Æ÷=10Ê±¶àÉÁÒ»´ÎÖÆÔì³öÁ½´ÎÉÁË¸
 183   2            if(StepDownTIM==10)
 184   2              {
 185   3              StepDownTIM++;
 186   3              return 1;
 187   3              }
 188   2          case StepDown_Thermal: //¹ıÈÈ
 189   2            StepDownTIM++;
 190   2            if(StepDownTIM==13)
 191   2              {
 192   3              StepDownTIM=0;
 193   3              return 1;
 194   3              }
 195   2            break;
 196   2          }
 197   1        //·µ»Ø0
 198   1        return 0;
 199   1        }
 200          
 201          //¸ºÔğÎÂ¶ÈÊ¹ÄÜ¿ØÖÆµÄÊ©ÃÜÌØ´¥·¢Æ÷
 202          static bit TempSchmittTrigger(bit ValueIN,char HighThreshold,char LowThreshold) 
 203            {
 204   1        if(Data.Systemp>HighThreshold)return 1;
 205   1        if(Data.Systemp<LowThreshold)return 0;
 206   1        //ÊıÖµ±£³Ö£¬Ã»ÓĞ¸Ä±ä
 207   1        return ValueIN;
 208   1        }
 209          
 210          //ÎÂ¶È¹ÜÀíº¯Êı
 211          void ThermalMgmtProcess(void)
 212            {
 213   1        bit ThermalStatus;
 214   1        //ÎÂ¶È´«¸ĞÆ÷´íÎó
 215   1        if(!Data.IsNTCOK)
 216   1          {
 217   2          ReportError(Fault_NTCFailed);
 218   2          return;
 219   2          }
 220   1        //ÊÖµçÎÂ¶È¹ı¸ßÊ±¶Ô¼«ÁÁ½øĞĞÏŞÖÆ
 221   1        IsForceLeaveTurbo=TempSchmittTrigger(IsForceLeaveTurbo,ForceOffTemp-10,ForceDisableTurboTemp-10); //ÎÂ¶È¾
             -àÀë¹Ø»ú±£»¤µÄ¼ä¾à²»µ½10¶È£¬Á¢¼´ÍË³ö¼«ÁÁ
 222   1        IsDisableTurbo=TempSchmittTrigger(IsDisableTurbo,ForceDisableTurboTemp,ForceDisableTurboTemp-10); //ÎÂ¶È´
             -ïµ½¹Ø±Õ¼«ÁÁµµµÄãĞÖµ£¬¹Ø±Õ¼«ÁÁ
 223   1        //¹ıÈÈ¹Ø»ú±£»¤
 224   1        IsSystemShutDown=TempSchmittTrigger(IsSystemShutDown,ForceOffTemp,ConstantTemperature-10);
 225   1        if(IsSystemShutDown)ReportError(Fault_OverHeat); //±¨¹ÊÕÏ
 226   1        else if(ErrCode==Fault_OverHeat)ClearError(); //Ïû³ıµôµ±Ç°´íÎó
 227   1        //PI»·Ê¹ÄÜ¿ØÖÆ
 228   1        if(!CurrentMode->IsNeedStepDown)IsTempLIMActive=0; //µ±Ç°µ²Î»²»ĞèÒª½µµµ
 229   1        else //Ê¹ÓÃÊ©ÃÜÌØº¯Êı¾ö¶¨ÎÂ¿ØÊÇ·ñ¼¤»î
 230   1          {
 231   2          ThermalStatus=TempSchmittTrigger(IsTempLIMActive,QueryConstantTemp(),ReleaseTemperature); //»ñÈ¡Ê©ÃÜÌØ´¥
             -·¢Æ÷µÄ½á¹û
 232   2          if(ThermalStatus)IsTempLIMActive=1;//Ê©ÃÜÌØº¯ÊıÒªÇó¼¤»îÎÂ¿Ø£¬Á¢¼´¼¤»î
 233   2          else if(!ThermalStatus&&!TempProtBuf&&TempIntegral<0)IsTempLIMActive=0; //Ê©ÃÜÌØº¯ÊıÒªÇó¹Ø±ÕÎÂ¿Ø£¬µÈ´ı±È
             -Àı»º´æÎª0½â³ıÏŞÁ÷ºó¹Ø±Õ
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/18/2025 14:33:18 PAGE 5   

 234   2          }
 235   1        } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    989    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

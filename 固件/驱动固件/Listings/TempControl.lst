C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/01/2025 07:57:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TEMPCONTROL
OBJECT MODULE PLACED IN .\Objects\TempControl.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Logic\TempControl.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODDP2 INCDIR(.\StdDri
                    -ver\inc;.\Hardware;.\include\Hardware;.\include\Logic;.\include\Middleware;.\include\System) DEFINE(EnableStdGPIO) DEBUG
                    - PRINT(.\Listings\TempControl.lst) TABS(2) OBJECT(.\Objects\TempControl.obj)

line level    source

   1          #include "ADCCfg.h"
   2          #include "LEDMgmt.h"
   3          #include "delay.h"
   4          #include "ModeControl.h"
   5          #include "TempControl.h"
   6          #include "BattDisplay.h"
   7          #include "OutputChannel.h"
   8          #include "PWMCfg.h"
   9          #include "LowVoltProt.h"
  10          #include "SelfTest.h"
  11          
  12          //ÄÚ²¿±äÁ¿
  13          static xdata int TempIntegral;
  14          static xdata int TempProtBuf;
  15          static char StepDownTIM;  //½µµµÏÔÊ¾¼ÆÊ±
  16          static unsigned char StepUpLockTIM; //¼ÆÊ±Æ÷
  17          
  18          //ÄÚ²¿×´Ì¬Î»
  19          static bit IsThermalStepDown; //±ê¼ÇÎ»£¬ÊÇ·ñ½µµµ
  20          static bit IsTempLIMActive;  //ÎÂ¿ØÊÇ·ñÒÑ¾­Æô¶¯
  21          static bit IsSystemShutDown; //ÊÇ·ñ´¥·¢ÎÂ¿ØÇ¿ÖÆ¹Ø»ú
  22          
  23          //Íâ²¿×´Ì¬Î»
  24          bit IsDisableTurbo;  //½ûÖ¹ÔÙ¶È½øÈëµ½¼«ÁÁµµ
  25          bit IsForceLeaveTurbo; //ÊÇ·ñÇ¿ÖÆÀë¿ª¼«ÁÁµµ
  26          
  27          //ÄÚ²¿ºê¶¨Òå
  28          #define MinumumILED CalcIREFValue(ILEDStepDown)
  29          
  30          
  31          //»»µ²µÄÊ±ºò¸ù¾İµ±Ç°ºãÎÂµÄµçÁ÷ÖØĞÂPIÖµ
  32          void RecalcPILoop(int LastCurrent)  
  33            {
  34   1        int buf,ModeCur;
  35   1        //Ä¿±êµ²Î»²»ĞèÒª¼ÆËã
  36   1        if(!CurrentMode->IsNeedStepDown)return;
  37   1        //»ñÈ¡µ±Ç°µ²Î»µçÁ÷
  38   1        ModeCur=QueryCurrentGearILED();
  39   1        //¼ÆËãPÖµ»º´æ
  40   1        buf=TempProtBuf+(TempIntegral/IntegralFactor); //¼ÆËãµçÁ÷¿Û¼õÖµ
  41   1        if(buf<0)buf=0; //µçÁ÷¿Û¼õÖµ²»ÄÜĞ¡ÓÚ0
  42   1        buf=LastCurrent-buf; //¾Éµ²Î»µçÁ÷¼õÈ¥¿Û¼õÖµµÃµ½Êµ¼ÊµçÁ÷(mA)
  43   1        TempProtBuf=ModeCur-LastCurrent; //PÖµ»º´æµÈÓÚĞÂµ²Î»µÄµçÁ÷-¾Éµ²Î»Êµ¼ÊµçÁ÷(mA)
  44   1        if(TempProtBuf<0)TempProtBuf=0; //²»ÔÊĞí±ÈÀı»º´æĞ¡ÓÚ0
  45   1        TempIntegral=0; //»ı·Ö»º´æ=0
  46   1        }
  47            
  48          //Êä³öµ±Ç°ÎÂ¿ØµÄÏŞÁ÷Öµ
  49          int ThermalILIMCalc(void)
  50            {
  51   1        int result;
  52   1        //ÅĞ¶ÏÎÂ¿ØÊÇ·ñĞèÒª½øĞĞ¼ÆËã
  53   1        if(!IsTempLIMActive)result=Current; //ÎÂ¿Ø±»¹Ø±Õ£¬µçÁ÷ÏŞÖÆ½øÀ´¶àÉÙ·µ»ØÈ¥¶àÉÙ
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/01/2025 07:57:18 PAGE 2   

  54   1        //¿ªÊ¼ÎÂ¿Ø¼ÆËã
  55   1        else
  56   1          {
  57   2          result=TempProtBuf+(TempIntegral/IntegralFactor); //¸ù¾İ»º´æ¼ÆËã½á¹û
  58   2          if(result<0)result=0; //²»ÔÊĞí¸ºÖµ³öÏÖ
  59   2          result=Current-result; //¼ÆËãÏŞÁ÷Öµ½á¹û
  60   2          if(result<MinumumILED) //ÒÑ¾­µ÷µ½µ×ÁË£¬½ûÖ¹PID¼ÌĞøÀÛ¼Ó
  61   2            {
  62   3            TempProtBuf=Current-MinumumILED; //½«±ÈÀıÊä³ö½á¹ûÏŞ·ùÎª×îĞ¡µçÁ÷
  63   3            TempIntegral=0;
  64   3            result=MinumumILED; //µçÁ÷ÏŞÖÆ²»ÔÊĞíĞ¡ÓÚ×îµÍµçÁ÷
  65   3            }
  66   2          }
  67   1        //·µ»Ø½á¹û  
  68   1        IsThermalStepDown=result==Current?0:1; //Èç¹ûÊäÈëµÈÓÚÊä³ö£¬Ôò½µµµÃ»·¢Éú
  69   1        return result; 
  70   1        }
  71          //»ñÈ¡ÎÂ¿Ø»·Â·µÄºãÎÂÖµ
  72          static int QueryConstantTemp(void)  
  73            {
  74   1        //¼«ÁÁµÄÊ±ºòÊ¹ÓÃ¸ü¸ßµÄÎÂ¿ØÀ­³¤½µµµÊ±¼ä
  75   1        return CurrentMode->ModeIdx==Mode_Turbo?TurboConstantTemperature:ConstantTemperature;
  76   1        }
  77          
  78          //ÎÂ¿ØPI»·¼ÆËã
  79          void ThermalPILoopCalc(void)  
  80            {
  81   1        int ProtFact,Err;
  82   1        //PI»·¹Ø±Õ£¬¸´Î»ÊıÖµ
  83   1        if(!IsTempLIMActive)
  84   1          {
  85   2          TempIntegral=0;
  86   2          TempProtBuf=0;
  87   2          IsThermalStepDown=0;
  88   2          }
  89   1        //½øĞĞPI»·µÄ¼ÆËã(½öÔÚÊä³ö¿ªÆôµÄÊ±ºò½øĞĞ»òÕß±¬ÉÁÄ£Ê½ÔËĞĞ¹ı³ÌÖĞÇ¿ÖÆ½øĞĞ)
  90   1        else if(GetIfOutputEnabled()||CurrentMode->ModeIdx==Mode_Strobe)
  91   1          {
  92   2          //»ñÈ¡ºãÎÂÎÂ¶ÈÖµ
  93   2          ProtFact=QueryConstantTemp();
  94   2          //ÎÂ¶ÈÎó²îÎªÕı
  95   2          if(Data.Systemp>ProtFact)
  96   2            {
  97   3            //¼ÆËãÎó²î
  98   3            Err=Data.Systemp-ProtFact;  //Îó²îÖµµÈÓÚÄ¿±êÎÂ¶È-ºãÎÂÎÂ¶È
  99   3            //±ÈÀıÏî(P)
 100   3            StepUpLockTIM=24; //ÉıµµÖ®ºóÎÂ¶È¹ı¸ßÔòÖ®ºóÍ£Ö¹3Ãë
 101   3            if(Err>2)
 102   3              {
 103   4              ProtFact=(CurrentBuf/2300)+1;
 104   4              if(Data.Systemp>(ForceDisableTurboTemp-5))ProtFact*=5; //ÎÂ¶È¹ı¸ß£¬À©ÕÅ±ÈÀıÏµÊı
 105   4              TempProtBuf+=(ProtFact*Err);  //ÏòbufÌá½»±ÈÀıÏî
 106   4              if(TempProtBuf>(CurrentMode->Current-MinumumILED))TempProtBuf=(CurrentMode->Current-MinumumILED); 
 107   4              StepUpLockTIM=60; //´¥·¢±ÈÀıÏî½µµµ£¬Í£7.5Ãë
 108   4              }
 109   3            //»ı·ÖÏî(I)
 110   3            if(TempIntegral<IntegrateFullScale)TempIntegral++;
 111   3            }
 112   2          //ÎÂ¶ÈĞ¡ÓÚºãÎÂÖµ
 113   2          else if(Data.Systemp<ProtFact)
 114   2            {
 115   3            //¼ÆËãÎó²î
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/01/2025 07:57:18 PAGE 3   

 116   3            Err=ProtFact-Data.Systemp;   //Îó²îµÈÓÚ±ÈÀı¼õ»ı·Ö 
 117   3            //±ÈÀıÏî
 118   3            if(StepUpLockTIM)StepUpLockTIM--; //µ±Ç°´¥·¢½µµµ»¹Ã»´ïµ½¿ìËÙÉıµµµÄÊ±¼ä
 119   3            else
 120   3              {
 121   4              if(Err&0x7E)TempProtBuf-=Err; //½øĞĞÉıµµ
 122   4              if(TempProtBuf<0)TempProtBuf=0;
 123   4              }
 124   3            //»ı·ÖÏî
 125   3            if(TempIntegral>(-IntegrateFullScale))TempIntegral--;   
 126   3            }
 127   2          }
 128   1        }
 129          //ÏÔÊ¾ÎÂ¶È¿ØÖÆÆô¶¯
 130          bit ShowThermalStepDown(void) 
 131            {
 132   1        StepDownReasonDef Reason;
 133   1        //ÅĞ¶ÏÏµÍ³ÊÇ·ñÔÚ½µµµ
 134   1        if(VshowFSMState!=BattVdis_Waiting)Reason=StepDown_OFF; //µ±Ç°´¦ÓÚµçÁ¿ÏÔÊ¾×´Ì¬²»ÔÊĞí´ò¶Ï
 135   1        else if(IsThermalStepDown)Reason=StepDown_Thermal; //ÎÂ¿Ø½µµµ´¥·¢
 136   1        else if(CurrentMode->ModeIdx==Mode_Turbo&&TurboILIM<QueryCurrentGearILED())Reason=StepDowm_BattAlert; //µ
             -ç³Ø³Å²»×¡
 137   1        else Reason=StepDown_OFF;
 138   1        //½øĞĞ½µµµ´¦Àí
 139   1        switch(Reason)    
 140   1          {
 141   2          case StepDown_OFF:StepDownTIM=0;break; //ÌáÊ¾Î´´¥·¢
 142   2          case StepDowm_BattAlert: //µç³Ø¾¯±¨
 143   2            //µ±¼ÆÊ±Æ÷=10Ê±¶àÉÁÒ»´ÎÖÆÔì³öÁ½´ÎÉÁË¸
 144   2            if(StepDownTIM==10)
 145   2              {
 146   3              StepDownTIM++;
 147   3              return 1;
 148   3              }
 149   2          case StepDown_Thermal: //¹ıÈÈ
 150   2            StepDownTIM++;
 151   2            if(StepDownTIM==12)
 152   2              {
 153   3              StepDownTIM=0;
 154   3              return 1;
 155   3              }
 156   2            break;
 157   2          }
 158   1        //·µ»Ø0
 159   1        return 0;
 160   1        }
 161          
 162          //¸ºÔğÎÂ¶ÈÊ¹ÄÜ¿ØÖÆµÄÊ©ÃÜÌØ´¥·¢Æ÷
 163          static bit TempSchmittTrigger(bit ValueIN,char HighThreshold,char LowThreshold) 
 164            {
 165   1        if(Data.Systemp>HighThreshold)return 1;
 166   1        if(Data.Systemp<LowThreshold)return 0;
 167   1        //ÊıÖµ±£³Ö£¬Ã»ÓĞ¸Ä±ä
 168   1        return ValueIN;
 169   1        }
 170          
 171          //ÎÂ¶È¹ÜÀíº¯Êı
 172          void ThermalMgmtProcess(void)
 173            {
 174   1        bit ThermalStatus;
 175   1        //ÎÂ¶È´«¸ĞÆ÷´íÎó
 176   1        if(!Data.IsNTCOK)
C51 COMPILER V9.60.0.0   TEMPCONTROL                                                       05/01/2025 07:57:18 PAGE 4   

 177   1          {
 178   2          ReportError(Fault_NTCFailed);
 179   2          return;
 180   2          }
 181   1        //ÊÖµçÎÂ¶È¹ı¸ßÊ±¶Ô¼«ÁÁ½øĞĞÏŞÖÆ
 182   1        IsForceLeaveTurbo=TempSchmittTrigger(IsForceLeaveTurbo,ForceOffTemp-10,ForceDisableTurboTemp-10); //ÎÂ¶È¾
             -àÀë¹Ø»ú±£»¤µÄ¼ä¾à²»µ½10¶È£¬Á¢¼´ÍË³ö¼«ÁÁ
 183   1        IsDisableTurbo=TempSchmittTrigger(IsDisableTurbo,ForceDisableTurboTemp,ForceDisableTurboTemp-10); //ÎÂ¶È´
             -ïµ½¹Ø±Õ¼«ÁÁµµµÄãĞÖµ£¬¹Ø±Õ¼«ÁÁ
 184   1        //¹ıÈÈ¹Ø»ú±£»¤
 185   1        IsSystemShutDown=TempSchmittTrigger(IsSystemShutDown,ForceOffTemp,ConstantTemperature-10);
 186   1        if(IsSystemShutDown)ReportError(Fault_OverHeat); //±¨¹ÊÕÏ
 187   1        else if(ErrCode==Fault_OverHeat)ClearError(); //Ïû³ıµôµ±Ç°´íÎó
 188   1        //PI»·Ê¹ÄÜ¿ØÖÆ
 189   1        if(!CurrentMode->IsNeedStepDown)IsTempLIMActive=0; //µ±Ç°µ²Î»²»ĞèÒª½µµµ
 190   1        else //Ê¹ÓÃÊ©ÃÜÌØº¯Êı¾ö¶¨ÎÂ¿ØÊÇ·ñ¼¤»î
 191   1          {
 192   2          ThermalStatus=TempSchmittTrigger(IsTempLIMActive,QueryConstantTemp(),ReleaseTemperature); //»ñÈ¡Ê©ÃÜÌØ´¥
             -·¢Æ÷µÄ½á¹û
 193   2          if(ThermalStatus)IsTempLIMActive=1;//Ê©ÃÜÌØº¯ÊıÒªÇó¼¤»îÎÂ¿Ø£¬Á¢¼´¼¤»î
 194   2          else if(!ThermalStatus&&!TempProtBuf&&TempIntegral<0)IsTempLIMActive=0; //Ê©ÃÜÌØº¯ÊıÒªÇó¹Ø±ÕÎÂ¿Ø£¬µÈ´ı±È
             -Àı»º´æÎª0½â³ıÏŞÁ÷ºó¹Ø±Õ
 195   2          }
 196   1        } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    844    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

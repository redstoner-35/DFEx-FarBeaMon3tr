C51 COMPILER V9.60.0.0   PWM                                                               05/01/2025 09:19:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Hardware\PWM.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODDP2 INCDIR(.\StdDriver\i
                    -nc;.\Hardware;.\include\Hardware;.\include\Logic;.\include\Middleware;.\include\System) DEFINE(EnableStdGPIO) DEBUG PRIN
                    -T(.\Listings\PWM.lst) TABS(2) OBJECT(.\Objects\PWM.obj)

line level    source

   1          #include "cms8s6990.h"
   2          #include "PinDefs.h"
   3          #include "GPIO.h"
   4          #include "PWMCfg.h"
   5          
   6          //全局变量
   7          xdata float PWMDuty;
   8          xdata int PreChargeDACDuty; //预充电PWMDAC的输出
   9          static bit IsPWMLoading; //PWM正在加载中
  10          static bit IsNeedToEnableOutput; //是否需要启用输出
  11          static bit IsNeedToEnableMOS; //是否需要使能MOS管
  12          bit IsNeedToUploadPWM; //是否需要更新PWM
  13          
  14          //关闭PWM定时器
  15          void PWM_DeInit(void)
  16            {
  17   1        //配置为普通GPIO
  18   1        GPIO_SetMUXMode(PWMDACIOG,PWMDACIOx,GPIO_AF_GPIO);  
  19   1        //关闭PWM模块
  20   1        PWMOE=0x00;
  21   1        PWMCNTE=0x00;
  22   1        PWM45PSC=0x00;
  23   1        PWM01PSC=0x00;  //关闭PWM计数器
  24   1        }
  25          
  26          //上传PWM值
  27          static void UploadPWMValue(void)  
  28            {
  29   1        PWMLOADEN=0x11; //加载通道0的PWM值
  30   1        while(PWMLOADEN&0x11); //等待加载结束
  31   1        }
  32              
  33          //PWM定时器初始化
  34          void PWM_Init(void)
  35            {
  36   1        GPIOCfgDef PWMInitCfg;
  37   1        //设置结构体
  38   1        PWMInitCfg.Mode=GPIO_Out_PP;
  39   1        PWMInitCfg.Slew=GPIO_Fast_Slew;   
  40   1        PWMInitCfg.DRVCurrent=GPIO_High_Current; //推PWMDAC，不需要很高的上升斜率
  41   1        //配置GPIO
  42   1        GPIO_WriteBit(PreChargeDACIOG,PreChargeDACIOx,0);
  43   1        GPIO_WriteBit(PWMDACIOG,PWMDACIOx,0);
  44   1        GPIO_ConfigGPIOMode(PreChargeDACIOG,GPIOMask(PreChargeDACIOx),&PWMInitCfg); 
  45   1        GPIO_ConfigGPIOMode(PWMDACIOG,GPIOMask(PWMDACIOx),&PWMInitCfg); 
  46   1        //启用复用功能
  47   1        GPIO_SetMUXMode(PWMDACIOG,PWMDACIOx,GPIO_AF_PWMCH0);
  48   1        GPIO_SetMUXMode(PreChargeDACIOG,PreChargeDACIOx,GPIO_AF_PWMCH4);
  49   1        //配置PWM发生器
  50   1        PWMCON=0x00; //PWM通道为六通道独立模式，向下计数，关闭非对称计数功能  
  51   1        PWMOE=0x1D; //打开PWM输出通道0 2 3 4
  52   1        PWM01PSC=0x01;  
  53   1        PWM45PSC=0x01;  //打开预分频器和计数器时钟 
C51 COMPILER V9.60.0.0   PWM                                                               05/01/2025 09:19:00 PAGE 2   

  54   1        PWM0DIV=0xff;   
  55   1        PWM4DIV=0xff;   //令Fpwmcnt=Fsys=48MHz(不分频)
  56   1        PWMPINV=0x00; //所有通道均设置为正常输出模式
  57   1        PWMCNTM=0x1D; //通道0 2 3 4配置为自动加载模式
  58   1        PWMCNTCLR=0x1D; //初始化PWM的时候复位通道0 2 3 4的定时器
  59   1        PWMDTE=0x00; //关闭死区时间
  60   1        PWMMASKD=0x00; 
  61   1        PWMMASKE=0x1D; //PWM掩码功能启用，默认状态下禁止通道0 2 3 4输出
  62   1        //配置周期数据
  63   1        PWMP0H=(PWMStepConstant>>8)&0xFF;
  64   1        PWMP0L=PWMStepConstant&0xFF;  
  65   1        PWMP4H=0x09;
  66   1        PWMP4L=0x5F; //PWM通道周期(48MHz/20KHz)-1=2399(0x95F)
  67   1        //配置占空比数据
  68   1        PWMD0H=0;
  69   1        PWMD0L=0; 
  70   1        PWMD4H=0x0;
  71   1        PWMD4L=0x0;
  72   1        //初始化变量
  73   1        PWMDuty=0;
  74   1        PreChargeDACDuty=0;
  75   1        IsPWMLoading=0; 
  76   1        IsNeedToUploadPWM=0;
  77   1        //启用PWM
  78   1        PWM_Enable();
  79   1        UploadPWMValue();
  80   1        }
  81          
  82          //短时间启用PWM输出的功能
  83          void PWM_ForceEnableOut(bit IsEnable) 
  84            {
  85   1        PWMD0L=IsEnable?0xFF:0; 
  86   1        PWMD4H=IsEnable?0x08:0;
  87   1        PWMD4L=IsEnable?0x2A:0x0;   //0x82A=87.128%=11.29-0.4815*14.4->(0.87128*5)
  88   1        UploadPWMValue();
  89   1        if(IsEnable)PWMMASKE&=0xEE;
  90   1        else PWMMASKE|=0x11;   //更新PWMMASKE寄存器根据输出状态启用对应的通道
  91   1        }
  92          
  93          //根据PWM结构体内的配置进行输出
  94          void PWM_OutputCtrlHandler(void)  
  95            {
  96   1        int value;
  97   1        float buf;
  98   1        //判断是否需要加载的逻辑运算
  99   1        if(!IsNeedToUploadPWM)return; //不需要加载
 100   1        else if(IsPWMLoading) //当次加载已开始，进行结束监测
 101   1          {
 102   2          if(PWMLOADEN&0x11)return;//加载寄存器复位为0，表示加载成功
 103   2          //加载结束
 104   2          if(IsNeedToEnableMOS)PWMMASKE&=0xEF;
 105   2          else PWMMASKE|=0x10;
 106   2          if(IsNeedToEnableOutput)PWMMASKE&=0xFE;
 107   2          else PWMMASKE|=0x01;   //更新PWMMASKE寄存器根据输出状态启用对应的通道
 108   2          IsNeedToUploadPWM=0;
 109   2          IsPWMLoading=0;  //正在加载状态为清除
 110   2          return;
 111   2          }
 112   1        //PWM占空比参数限制
 113   1        if(PWMDuty>100)PWMDuty=100;
 114   1        if(PWMDuty<0)PWMDuty=0;
 115   1        if(PreChargeDACDuty>2399)PreChargeDACDuty=2399;
C51 COMPILER V9.60.0.0   PWM                                                               05/01/2025 09:19:00 PAGE 3   

 116   1        if(PreChargeDACDuty<0)PreChargeDACDuty=0;
 117   1        //根据PWM数值选择MASK寄存器是否启用
 118   1        IsNeedToEnableOutput=PWMDuty>0?1:0; //是否需要启用输出
 119   1        IsNeedToEnableMOS=PreChargeDACDuty>0?1:0;  //配置是否需要使能FET
 120   1        //配置寄存器装载PWM设置数值
 121   1        buf=PWMDuty*(float)PWMStepConstant;
 122   1        buf/=(float)100;
 123   1        value=(int)buf;
 124   1        PWMD4H=(PreChargeDACDuty>>8)&0xFF;
 125   1        PWMD4L=PreChargeDACDuty&0xFF;
 126   1        PWMD0H=(value>>8)&0xFF;
 127   1        PWMD0L=value&0xFF;      
 128   1        //PWM寄存器数值已装入，应用数值   
 129   1        IsPWMLoading=1; //标记加载过程进行中
 130   1        PWMLOADEN|=0x11; //开始加载
 131   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    593    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

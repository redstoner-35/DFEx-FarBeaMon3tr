C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/01/2025 07:57:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LOWVOLTAGEPROT
OBJECT MODULE PLACED IN .\Objects\LowVoltageProt.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Logic\LowVoltageProt.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODDP2 INCDIR(.\Std
                    -Driver\inc;.\Hardware;.\include\Hardware;.\include\Logic;.\include\Middleware;.\include\System) DEFINE(EnableStdGPIO) DE
                    -BUG PRINT(.\Listings\LowVoltageProt.lst) TABS(2) OBJECT(.\Objects\LowVoltageProt.obj)

line level    source

   1          #include "BattDisplay.h"
   2          #include "ModeControl.h"
   3          #include "LowVoltProt.h"
   4          #include "OutputChannel.h"
   5          #include "SideKey.h"
   6          
   7          //ÄÚ²¿±äÁ¿
   8          static xdata char BattAlertTimer=0; //µç³ØµÍµçÑ¹¸æ¾¯´¦Àí
   9          static xdata char RampCurrentRiseAttmTIM=0; //ÎÞ¼«µ÷¹â»Ö¸´µçÁ÷µÄ¼ÆÊ±Æ÷  
  10          xdata int TurboILIM; //¼«ÁÁµçÁ÷ÏÞÖÆ
  11          
  12          //µÍµçÁ¿±£»¤º¯Êý
  13          static void StartBattAlertTimer(void)
  14            {
  15   1        //Æô¶¯¶¨Ê±Æ÷
  16   1        if(BattAlertTimer)return;
  17   1        BattAlertTimer=1;
  18   1        } 
  19          
  20          //µç³ØµÍµçÁ¿±¨¾¯´¦Àíº¯Êý
  21          void BattAlertTIMHandler(void)
  22            {
  23   1        //ÎÞ¼«µ÷¹â¾¯±¨¶¨Ê±
  24   1        if(RampCurrentRiseAttmTIM>0&&RampCurrentRiseAttmTIM<9)RampCurrentRiseAttmTIM++;
  25   1        //µçÁ¿¾¯±¨
  26   1        if(BattAlertTimer>0&&BattAlertTimer<(BatteryAlertDelay+1))BattAlertTimer++;
  27   1        } 
  28            
  29          //¼ÆËã¼«ÁÁµ²Î»µçÁ÷µÄÏÞÖÆÖµ
  30          void CalcTurboILIM(void)
  31            {
  32   1        if(Battery>3.6)TurboILIM=QueryCurrentGearILED(); //µç³ØµçÑ¹´óÓÚ3.6Ê±°´ÕÕÄ¿±êµçÁ÷È¥È¡
  33   1        else if(Battery>3.4)TurboILIM=CalcIREFValue(20000); //µç³ØµçÑ¹µÍ£¬¼«ÁÁËø20AÊä³ö
  34   1        else TurboILIM=CalcIREFValue(15000); //µç³ØµçÑ¹µÍµÄ²»ÐÐÁËµç³Ø¿¸²»×¡£¬¼«ÁÁËø15A
  35   1        } 
  36            
  37          //¼«ÁÁµ²Î»Ê±¶¯Ì¬³¢ÊÔ¼«ÁÁÔËÐÐÖµµÄ¹¦ÄÜ
  38          void TurboLVILIMProcess(void) 
  39            {
  40   1        //µç³ØµçÑ¹¹ýµÍ£¬Á¢¼´ÍË³ö¼«ÁÁ
  41   1        if(IsBatteryFault)
  42   1          {
  43   2          StartBattAlertTimer();
  44   2          if(BattAlertTimer<BatteryFaultDelay)return;
  45   2          //Ê±¼äµ½£¬Á¢¼´»»µ²
  46   2          BattAlertTimer=0; 
  47   2          SwitchToGear(IsRampEnabled?Mode_Ramp:Mode_High);
  48   2          }
  49   1        //µç³ØµçÑ¹µÍ»òÕß´¥·¢ÊäÈëÏÞÁ÷£¬ÏÂµ÷¼«ÁÁ
  50   1        else if(IsBatteryAlert)
  51   1          {
  52   2          TurboILIM-=10;
  53   2          if(TurboILIM>CalcIREFValue(13000))return;
C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/01/2025 07:57:18 PAGE 2   

  54   2          //³¢ÊÔµ½13AÈÔÈ»ÎÞ·¨Âú×ã¼«ÁÁ£¬ÍË³ö¼«ÁÁ
  55   2          TurboILIM=CalcIREFValue(13000);
  56   2          SwitchToGear(IsRampEnabled?Mode_Ramp:Mode_High);
  57   2          }
  58   1        //µç³ØµçÑ¹»Ö¸´¿ªÊ¼ÉÏµ÷¼«ÁÁ
  59   1        else if(Battery>4.0)
  60   1          {
  61   2          if(TurboILIM<QueryCurrentGearILED())TurboILIM+=10;
  62   2          else TurboILIM=QueryCurrentGearILED();
  63   2          }
  64   1        }
  65          
  66          //µç³ØµÍµçÁ¿±£»¤º¯Êý
  67          void BatteryLowAlertProcess(bool IsNeedToShutOff,ModeIdxDef ModeJump)
  68            {
  69   1        char Thr;
  70   1        bit IsChangingGear;
  71   1        //»ñÈ¡ÊÖµç°´¼üµÄ×´Ì¬
  72   1        if(getSideKey1HEvent())IsChangingGear=1;
  73   1        else IsChangingGear=getSideKeyHoldEvent();
  74   1        //¿ØÖÆ¼ÆÊ±Æ÷ÆôÍ£
  75   1        if(!IsBatteryFault) //µç³ØÃ»ÓÐ·¢ÉúµÍÑ¹¹ÊÕÏ
  76   1          {
  77   2          Thr=BatteryAlertDelay; //Ã»ÓÐ¹ÊÕÏ¿ÉÒÔÂýÒ»µã½µµµ
  78   2          //µ±Ç°ÔÚ»»µ²½×¶Î»òÕßÃ»ÓÐ¸æ¾¯£¬Í£Ö¹¼ÆÊ±Æ÷,·ñÔòÆô¶¯
  79   2          if(!IsBatteryAlert||IsChangingGear)BattAlertTimer=0;
  80   2          else StartBattAlertTimer();
  81   2          }
  82   1        else //·¢ÉúµÍÑ¹¸æ¾¯Á¢¼´Æô¶¯¶¨Ê±Æ÷
  83   1          {
  84   2          Thr=BatteryFaultDelay;
  85   2          StartBattAlertTimer(); 
  86   2          }
  87   1        //µ±Ç°Ä£Ê½ÐèÒª¹Ø»ú
  88   1        if(IsNeedToShutOff||IsChangingGear)
  89   1           {
  90   2           //µç³ØµçÑ¹µÍÓÚ¹Ø»úãÐÖµ×ã¹»Ê±¼ä£¬Á¢¼´¹Ø±Õ
  91   2           if(IsBatteryFault&&BattAlertTimer>Thr)ReturnToOFFState(); 
  92   2           }
  93   1        //²»ÐèÒª¹Ø»ú£¬´¥·¢»»µ²¶¯×÷
  94   1        else if(BattAlertTimer>Thr)
  95   1           {
  96   2           BattAlertTimer=0;//ÖØÖÃ¶¨Ê±Æ÷ÖÁ³õÊ¼Öµ
  97   2           SwitchToGear(ModeJump); //¸´Î»µ½Ö¸¶¨µ²Î»
  98   2           }
  99   1        }   
 100          
 101          //ÎÞ¼«µ÷¹â¿ª»úÊ±»Ö¸´µÍÑ¹±£»¤ÏÞÁ÷µÄ´¦Àí  
 102          void RampRestoreLVProtToMax(void)
 103            {
 104   1        if(IsBatteryAlert||IsBatteryFault)return;
 105   1        if(BattState==Battery_Plenty)SysCfg.RampCurrentLimit=CurrentMode->Current; //µç³ØµçÁ¿»ØÉýµ½³ä×ã×´Ì¬£¬¸´Î»
             -µçÁ÷ÏÞÖÆ
 106   1        }
 107            
 108          //ÎÞ¼«µ÷¹âµÄµÍµçÑ¹±£»¤
 109          void RampLowVoltHandler(void)
 110            {
 111   1        if(!IsBatteryAlert&&!IsBatteryFault)//Ã»ÓÐ¸æ¾¯
 112   1          {
 113   2          BattAlertTimer=0;
 114   2          if(BattState==Battery_Plenty) //µç³ØµçÁ¿»ØÉýµ½³ä×ã×´Ì¬£¬»ºÂýÔö¼ÓµçÁ÷ÏÞÖÆ
C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/01/2025 07:57:18 PAGE 3   

 115   2            {
 116   3            if(SysCfg.RampCurrentLimit<CurrentMode->Current)
 117   3               {
 118   4               if(!RampCurrentRiseAttmTIM)RampCurrentRiseAttmTIM=1; //Æô¶¯¶¨Ê±Æ÷¿ªÊ¼¼ÆÊ±
 119   4               else if(RampCurrentRiseAttmTIM<9)return; //Ê±¼äÎ´µ½
 120   4               RampCurrentRiseAttmTIM=1;
 121   4               if(SysCfg.RampBattThres>CurrentMode->LowVoltThres)SysCfg.RampBattThres=CurrentMode->LowVoltThres; //µ
             -çÑ¹¼ì²â´ïµ½ÉÏÏÞ£¬½ûÖ¹¼ÌÐøÔö¼Ó
 122   4               else SysCfg.RampBattThres+=50; //µçÑ¹¼ì²âÉÏµ÷50mV
 123   4               if(SysCfg.RampCurrentLimit>CurrentMode->Current)SysCfg.RampCurrentLimit=CurrentMode->Current;//Ôö
             -¼ÓµçÁ÷Ö®ºó¼ì²âµçÁ÷ÖµÊÇ·ñ³¬³öÔÊÐíÖµ
 124   4               else SysCfg.RampCurrentLimit+=250; //µçÁ÷ÉÏµ÷250mA    
 125   4               }
 126   3            else RampCurrentRiseAttmTIM=0; //ÒÑ´ïµ½µçÁ÷ÉÏÏÞ½ûÖ¹¼ÌÐøÔö¼Ó
 127   3            }
 128   2          return;
 129   2          }
 130   1        else RampCurrentRiseAttmTIM=0; //´¥·¢¾¯±¨£¬¸´Î»³¢ÊÔÔö¼ÓµçÁ÷µÄ¶¨Ê±Æ÷
 131   1        //µÍÑ¹¸æ¾¯·¢Éú£¬Æô¶¯¶¨Ê±Æ÷
 132   1        StartBattAlertTimer(); //·¢ÉúÃüÁîÆô¶¯¶¨Ê±Æ÷
 133   1        if(IsBatteryFault&&BattAlertTimer>4)ReturnToOFFState(); //µç³ØµçÑ¹µÍÓÚ¹Ø»úãÐÖµ´óÓÚ0.5Ãë£¬Á¢¼´¹Ø±Õ
 134   1        else if(BattAlertTimer>BatteryAlertDelay) //µç³Øµ²Î»´¥·¢
 135   1          {
 136   2          if(SysCfg.RampCurrentLimit>CalcIREFValue(500))SysCfg.RampCurrentLimit-=250; //µçÁ÷ÏÂµ÷250mA
 137   2          if(SysCfg.RampBattThres>2750)SysCfg.RampBattThres-=25; //¼õÉÙ25mV
 138   2          BattAlertTimer=1;//ÖØÖÃ¶¨Ê±Æ÷
 139   2          }
 140   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    670    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

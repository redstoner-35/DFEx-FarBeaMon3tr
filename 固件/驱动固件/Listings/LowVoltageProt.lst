C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/15/2025 17:32:13 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LOWVOLTAGEPROT
OBJECT MODULE PLACED IN .\Objects\LowVoltageProt.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Logic\LowVoltageProt.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODDP2 INCDIR(.\Std
                    -Driver\inc;.\Hardware;.\include\Hardware;.\include\Logic;.\include\Middleware;.\include\System) DEFINE(EnableStdGPIO) DE
                    -BUG PRINT(.\Listings\LowVoltageProt.lst) TABS(2) OBJECT(.\Objects\LowVoltageProt.obj)

line level    source

   1          #include "BattDisplay.h"
   2          #include "ModeControl.h"
   3          #include "LowVoltProt.h"
   4          #include "OutputChannel.h"
   5          #include "SideKey.h"
   6          
   7          //ÄÚ²¿±äÁ¿
   8          static xdata char BattAlertTimer=0; //µç³ØµÍµçÑ¹¸æ¾¯´¦Àí
   9          static xdata char RampCurrentRiseAttmTIM=0; //ÎÞ¼«µ÷¹â»Ö¸´µçÁ÷µÄ¼ÆÊ±Æ÷  
  10          static xdata char TryTurboILIMTimer=0; //³¢ÊÔÏÂµ÷¼«ÁÁµÄÀäÈ´¼ÆÊ±
  11          
  12          //È«¾Ö²Î¿¼
  13          xdata int TurboILIM; //¼«ÁÁµçÁ÷ÏÞÖÆ
  14          
  15          
  16          //µÍµçÁ¿±£»¤º¯Êý
  17          static void StartBattAlertTimer(void)
  18            {
  19   1        //Æô¶¯¶¨Ê±Æ÷
  20   1        if(BattAlertTimer)return;
  21   1        BattAlertTimer=1;
  22   1        } 
  23          
  24          //µç³ØµÍµçÁ¿±¨¾¯´¦Àíº¯Êý
  25          void BattAlertTIMHandler(void)
  26            {
  27   1        //¼«ÁÁÏÂµ÷µçÁ÷¼ÆÊ±  
  28   1        if(TryTurboILIMTimer>0)TryTurboILIMTimer--;
  29   1        //ÎÞ¼«µ÷¹â¾¯±¨¶¨Ê±
  30   1        if(RampCurrentRiseAttmTIM>0&&RampCurrentRiseAttmTIM<9)RampCurrentRiseAttmTIM++;
  31   1        //µçÁ¿¾¯±¨
  32   1        if(BattAlertTimer>0&&BattAlertTimer<(BatteryAlertDelay+1))BattAlertTimer++;
  33   1        } 
  34            
  35          //¼ÆËã¼«ÁÁµ²Î»µçÁ÷µÄÏÞÖÆÖµ
  36          void CalcTurboILIM(void)
  37            {
  38   1        if(Battery>3.6)TurboILIM=QueryCurrentGearILED(); //µç³ØµçÑ¹´óÓÚ3.6Ê±°´ÕÕÄ¿±êµçÁ÷È¥È¡
  39   1        else TurboILIM=CalcIREFValue(25000); //µç³ØµçÑ¹µÍ£¬¼«ÁÁËø25AÊä³ö
  40   1        } 
  41            
  42          //¼«ÁÁµ²Î»Ê±¶¯Ì¬³¢ÊÔ¼«ÁÁÔËÐÐÖµµÄ¹¦ÄÜ
  43          void TurboLVILIMProcess(void) 
  44            {
  45   1        //µç³ØµçÑ¹¹ýµÍ£¬Á¢¼´ÍË³ö¼«ÁÁ
  46   1        if(IsBatteryFault)
  47   1          {
  48   2          StartBattAlertTimer();
  49   2          if(BattAlertTimer<BatteryFaultDelay)return;
  50   2          //Ê±¼äµ½£¬Á¢¼´»»µ²
  51   2          BattAlertTimer=0; 
  52   2          SwitchToGear(IsRampEnabled?Mode_Ramp:Mode_High);
  53   2          }
C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/15/2025 17:32:13 PAGE 2   

  54   1        //µç³ØµçÑ¹µÍ»òÕß´¥·¢ÊäÈëÏÞÁ÷£¬ÏÂµ÷¼«ÁÁ
  55   1        else if(IsBatteryAlert)
  56   1          {
  57   2          //ÔÚµçÁ÷RampUpµÄ¹ý³ÌÖÐÈç¹û´¥·¢ÊäÈëÏÞÁ÷ÔòÁ¢¼´½«µ±Ç°µçÁ÷ÖµÉèÖÃÎª¼«ÁÁÏÞÁ÷
  58   2          if(IsCurrentRampUp&&CurrentBuf<QueryCurrentGearILED())
  59   2            {
  60   3            CurrentBuf=TurboILIM;
  61   3            IsCurrentRampUp=1; //Ç¿ÖÆset±ê¼ÇÎ»È·±£¼«ÁÁÏÞÁ÷Ö»Ö´ÐÐÒ»´Î
  62   3            return;
  63   3            }
  64   2          //ÊÖµçÒÑ¾­½øÈë¼«ÁÁ£¬Õý³£Ö´ÐÐÏÞÁ÷´¦Àí
  65   2          if(TryTurboILIMTimer)return;
  66   2          TurboILIM-=25;
  67   2          TryTurboILIMTimer=TurboILIMTryCDTime; //Ó¦ÓÃ¶¨Ê±£¬½µµÍµçÁ÷ºóµÈ´ýÒ»»áÔÙÅÐ¶Ï
  68   2          //ÅÐ¶ÏµçÁ÷ÊÇ·ñÈÔÔÚ¼«ÁÁÇø¼äÄÚ
  69   2          if(TurboILIM>CalcIREFValue(13000))return;
  70   2          //³¢ÊÔµ½13AÈÔÈ»ÎÞ·¨Âú×ã¼«ÁÁ£¬ÍË³ö¼«ÁÁ
  71   2          TurboILIM=CalcIREFValue(13000);
  72   2          SwitchToGear(IsRampEnabled?Mode_Ramp:Mode_High);
  73   2          }
  74   1        }
  75          
  76          //µç³ØµÍµçÁ¿±£»¤º¯Êý
  77          void BatteryLowAlertProcess(bool IsNeedToShutOff,ModeIdxDef ModeJump)
  78            {
  79   1        char Thr;
  80   1        bit IsChangingGear;
  81   1        //»ñÈ¡ÊÖµç°´¼üµÄ×´Ì¬
  82   1        if(getSideKey1HEvent())IsChangingGear=1;
  83   1        else IsChangingGear=getSideKeyHoldEvent();
  84   1        //¿ØÖÆ¼ÆÊ±Æ÷ÆôÍ£
  85   1        if(!IsBatteryFault) //µç³ØÃ»ÓÐ·¢ÉúµÍÑ¹¹ÊÕÏ
  86   1          {
  87   2          Thr=BatteryAlertDelay; //Ã»ÓÐ¹ÊÕÏ¿ÉÒÔÂýÒ»µã½µµµ
  88   2          //µ±Ç°ÔÚ»»µ²½×¶Î»òÕßÃ»ÓÐ¸æ¾¯£¬Í£Ö¹¼ÆÊ±Æ÷,·ñÔòÆô¶¯
  89   2          if(!IsBatteryAlert||IsChangingGear)BattAlertTimer=0;
  90   2          else StartBattAlertTimer();
  91   2          }
  92   1        else //·¢ÉúµÍÑ¹¸æ¾¯Á¢¼´Æô¶¯¶¨Ê±Æ÷
  93   1          {
  94   2          Thr=BatteryFaultDelay;
  95   2          StartBattAlertTimer(); 
  96   2          }
  97   1        //µ±Ç°Ä£Ê½ÐèÒª¹Ø»ú
  98   1        if(IsNeedToShutOff||IsChangingGear)
  99   1           {
 100   2           //µç³ØµçÑ¹µÍÓÚ¹Ø»úãÐÖµ×ã¹»Ê±¼ä£¬Á¢¼´¹Ø±Õ
 101   2           if(IsBatteryFault&&BattAlertTimer>Thr)ReturnToOFFState(); 
 102   2           }
 103   1        //²»ÐèÒª¹Ø»ú£¬´¥·¢»»µ²¶¯×÷
 104   1        else if(BattAlertTimer>Thr)
 105   1           {
 106   2           BattAlertTimer=0;//ÖØÖÃ¶¨Ê±Æ÷ÖÁ³õÊ¼Öµ
 107   2           SwitchToGear(ModeJump); //¸´Î»µ½Ö¸¶¨µ²Î»
 108   2           }
 109   1        }   
 110          
 111          //ÎÞ¼«µ÷¹â¿ª»úÊ±»Ö¸´µÍÑ¹±£»¤ÏÞÁ÷µÄ´¦Àí  
 112          void RampRestoreLVProtToMax(void)
 113            {
 114   1        if(IsBatteryAlert||IsBatteryFault)return;
 115   1        if(BattState==Battery_Plenty)SysCfg.RampCurrentLimit=CurrentMode->Current; //µç³ØµçÁ¿»ØÉýµ½³ä×ã×´Ì¬£¬¸´Î»
C51 COMPILER V9.60.0.0   LOWVOLTAGEPROT                                                    05/15/2025 17:32:13 PAGE 3   

             -µçÁ÷ÏÞÖÆ
 116   1        }
 117            
 118          //ÎÞ¼«µ÷¹âµÄµÍµçÑ¹±£»¤
 119          void RampLowVoltHandler(void)
 120            {
 121   1        if(!IsBatteryAlert&&!IsBatteryFault)//Ã»ÓÐ¸æ¾¯
 122   1          {
 123   2          BattAlertTimer=0;
 124   2          if(BattState==Battery_Plenty) //µç³ØµçÁ¿»ØÉýµ½³ä×ã×´Ì¬£¬»ºÂýÔö¼ÓµçÁ÷ÏÞÖÆ
 125   2            {
 126   3            if(SysCfg.RampCurrentLimit<CurrentMode->Current)
 127   3               {
 128   4               if(!RampCurrentRiseAttmTIM)RampCurrentRiseAttmTIM=1; //Æô¶¯¶¨Ê±Æ÷¿ªÊ¼¼ÆÊ±
 129   4               else if(RampCurrentRiseAttmTIM<9)return; //Ê±¼äÎ´µ½
 130   4               RampCurrentRiseAttmTIM=1;
 131   4               if(SysCfg.RampBattThres>CurrentMode->LowVoltThres)SysCfg.RampBattThres=CurrentMode->LowVoltThres; //µ
             -çÑ¹¼ì²â´ïµ½ÉÏÏÞ£¬½ûÖ¹¼ÌÐøÔö¼Ó
 132   4               else SysCfg.RampBattThres+=50; //µçÑ¹¼ì²âÉÏµ÷50mV
 133   4               if(SysCfg.RampCurrentLimit>CurrentMode->Current)SysCfg.RampCurrentLimit=CurrentMode->Current;//Ôö
             -¼ÓµçÁ÷Ö®ºó¼ì²âµçÁ÷ÖµÊÇ·ñ³¬³öÔÊÐíÖµ
 134   4               else SysCfg.RampCurrentLimit+=250; //µçÁ÷ÉÏµ÷250mA    
 135   4               }
 136   3            else RampCurrentRiseAttmTIM=0; //ÒÑ´ïµ½µçÁ÷ÉÏÏÞ½ûÖ¹¼ÌÐøÔö¼Ó
 137   3            }
 138   2          return;
 139   2          }
 140   1        else RampCurrentRiseAttmTIM=0; //´¥·¢¾¯±¨£¬¸´Î»³¢ÊÔÔö¼ÓµçÁ÷µÄ¶¨Ê±Æ÷
 141   1        //µÍÑ¹¸æ¾¯·¢Éú£¬Æô¶¯¶¨Ê±Æ÷
 142   1        StartBattAlertTimer(); //·¢ÉúÃüÁîÆô¶¯¶¨Ê±Æ÷
 143   1        if(IsBatteryFault&&BattAlertTimer>4)ReturnToOFFState(); //µç³ØµçÑ¹µÍÓÚ¹Ø»úãÐÖµ´óÓÚ0.5Ãë£¬Á¢¼´¹Ø±Õ
 144   1        else if(BattAlertTimer>BatteryAlertDelay) //µç³Øµ²Î»´¥·¢
 145   1          {
 146   2          if(SysCfg.RampCurrentLimit>CalcIREFValue(500))SysCfg.RampCurrentLimit-=250; //µçÁ÷ÏÂµ÷250mA
 147   2          if(SysCfg.RampBattThres>2750)SysCfg.RampBattThres-=25; //¼õÉÙ25mV
 148   2          BattAlertTimer=1;//ÖØÖÃ¶¨Ê±Æ÷
 149   2          }
 150   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    663    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

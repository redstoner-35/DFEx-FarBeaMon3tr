<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CMSPanel.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CMSPanel.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 17 11:29:53 2025
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; RunLogModule_POR &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[aa]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aa]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC_IRQHandler</a> from ht32f5xxxx_01_it.o(i.ADC_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[79]">AboutMenuKeyProc</a> from aboutmenu.o(i.AboutMenuKeyProc) referenced from aboutmenu.o(.constdata)
 <LI><a href="#[78]">AboutMenuRender</a> from aboutmenu.o(i.AboutMenuRender) referenced from aboutmenu.o(.constdata)
 <LI><a href="#[43]">ActOneShotTest</a> from setttingmainmenu.o(i.ActOneShotTest) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[7d]">AdapterEmuRender</a> from adapteremulationmenu.o(i.AdapterEmuRender) referenced from adapteremulationmenu.o(.constdata)
 <LI><a href="#[7e]">AdapterMenuKeyProc</a> from adapteremulationmenu.o(i.AdapterMenuKeyProc) referenced from adapteremulationmenu.o(.constdata)
 <LI><a href="#[9b]">AutoBalMenuKeyHandler</a> from autoextendbalancemenu.o(i.AutoBalMenuKeyHandler) referenced from autoextendbalancemenu.o(.constdata)
 <LI><a href="#[9a]">AutoBalMenuRenderHandler</a> from autoextendbalancemenu.o(i.AutoBalMenuRenderHandler) referenced from autoextendbalancemenu.o(.constdata)
 <LI><a href="#[1a]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[73]">BackFromEsetupToMainMenu</a> from easysetupmenu.o(i.BackFromEsetupToMainMenu) referenced from easysetupmenu.o(.constdata)
 <LI><a href="#[94]">BackFromGUIPref</a> from guiprefmenu.o(i.BackFromGUIPref) referenced from guiprefmenu.o(.constdata)
 <LI><a href="#[7b]">BackFromTset</a> from otptempset.o(i.BackFromTset) referenced from otptempset.o(.constdata)
 <LI><a href="#[a6]">BackToEasySetup</a> from enteradvancedmodemenu.o(i.BackToEasySetup) referenced from enteradvancedmodemenu.o(.data)
 <LI><a href="#[5d]">BackToResetMenu</a> from resetconfigmenu.o(i.BackToResetMenu) referenced 3 times from resetconfigmenu.o(.constdata)
 <LI><a href="#[98]">BalMenuFSMProcess</a> from manustartbalancemenu.o(i.BalMenuFSMProcess) referenced from manustartbalancemenu.o(.constdata)
 <LI><a href="#[97]">BalMenuGUIHandler</a> from manustartbalancemenu.o(i.BalMenuGUIHandler) referenced from manustartbalancemenu.o(.constdata)
 <LI><a href="#[29]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[54]">CTestGUIHandler</a> from captestmenu.o(i.CTestGUIHandler) referenced from captestmenu.o(.constdata)
 <LI><a href="#[55]">CTestKeyHandler</a> from captestmenu.o(i.CTestKeyHandler) referenced from captestmenu.o(.constdata)
 <LI><a href="#[5b]">CalcIfNeedToReset</a> from restorefactorysetmenu.o(i.CalcIfNeedToReset) referenced from restorefactorysetmenu.o(.constdata)
 <LI><a href="#[62]">CapHisKeyHandler</a> from displaylastctestmenu.o(i.CapHisKeyHandler) referenced from displaylastctestmenu.o(.constdata)
 <LI><a href="#[67]">CheckILimitIsOK</a> from setchargecurrentmenu.o(i.CheckILimitIsOK) referenced from setchargecurrentmenu.o(.constdata)
 <LI><a href="#[6d]">ColHisKeyHandler</a> from columgaugeviewmenu.o(i.ColHisKeyHandler) referenced from columgaugeviewmenu.o(.constdata)
 <LI><a href="#[8d]">DisplayAlertMsg</a> from safetyalertmenu.o(i.DisplayAlertMsg) referenced from safetyalertmenu.o(.constdata)
 <LI><a href="#[5c]">DisplayResetOK</a> from resetconfigmenu.o(i.DisplayResetOK) referenced 3 times from resetconfigmenu.o(.constdata)
 <LI><a href="#[86]">DisplaySuccEnteredCapStart</a> from enableinstcaptmenu.o(i.DisplaySuccEnteredCapStart) referenced from enableinstcaptmenu.o(.constdata)
 <LI><a href="#[f]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from ht32f5xxxx_01_it.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9c]">EnableAutoBal</a> from autoextendbalancemenu.o(i.EnableAutoBal) referenced from autoextendbalancemenu.o(.constdata)
 <LI><a href="#[88]">EnableICTestMode</a> from enableinstcaptmenu.o(i.EnableICTestMode) referenced from enableinstcaptmenu.o(.constdata)
 <LI><a href="#[4b]">EnterAbout</a> from setttingmainmenu.o(i.EnterAbout) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[42]">EnterAdapterEmu</a> from setttingmainmenu.o(i.EnterAdapterEmu) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[7f]">EnterAdapterEmulation</a> from adapteremulationmenu.o(i.EnterAdapterEmulation) referenced from adapteremulationmenu.o(.constdata)
 <LI><a href="#[72]">EnterAdvMode</a> from easysetupmenu.o(i.EnterAdvMode) referenced from easysetupmenu.o(.constdata)
 <LI><a href="#[a5]">EnterAdvModeProc</a> from enteradvancedmodemenu.o(i.EnterAdvModeProc) referenced from enteradvancedmodemenu.o(.data)
 <LI><a href="#[3c]">EnterBalCfg</a> from setttingmainmenu.o(i.EnterBalCfg) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[41]">EnterCTHistory</a> from setttingmainmenu.o(i.EnterCTHistory) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[44]">EnterChargeTest</a> from setttingmainmenu.o(i.EnterChargeTest) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[3f]">EnterChgMgmt</a> from setttingmainmenu.o(i.EnterChgMgmt) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[4f]">EnterChgVsetMenu</a> from chargingsystemmenu.o(i.EnterChgVsetMenu) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[3d]">EnterDisMgmt</a> from setttingmainmenu.o(i.EnterDisMgmt) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[9d]">EnterDsourceSel</a> from typecgaugeconfigmenu.o(i.EnterDsourceSel) referenced from typecgaugeconfigmenu.o(.constdata)
 <LI><a href="#[39]">EnterGUIPref</a> from setttingmainmenu.o(i.EnterGUIPref) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[4d]">EnterIChargeSet</a> from chargingsystemmenu.o(i.EnterIChargeSet) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[51]">EnterIstopMenu</a> from chargingsystemmenu.o(i.EnterIstopMenu) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[40]">EnterLVSet</a> from setttingmainmenu.o(i.EnterLVSet) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[46]">EnterManuBal</a> from setttingmainmenu.o(i.EnterManuBal) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[52]">EnterMaxVPDMenu</a> from chargingsystemmenu.o(i.EnterMaxVPDMenu) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[3e]">EnterPDOConfig</a> from setttingmainmenu.o(i.EnterPDOConfig) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[3b]">EnterPSet</a> from setttingmainmenu.o(i.EnterPSet) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[4e]">EnterPreChargeIset</a> from chargingsystemmenu.o(i.EnterPreChargeIset) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[50]">EnterRechargeSetMenu</a> from chargingsystemmenu.o(i.EnterRechargeSetMenu) referenced from chargingsystemmenu.o(.constdata)
 <LI><a href="#[49]">EnterResetFactory</a> from setttingmainmenu.o(i.EnterResetFactory) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[8f]">EnterSafeAlmMode</a> from safetyalertmenu.o(i.EnterSafeAlmMode) referenced from safetyalertmenu.o(.constdata)
 <LI><a href="#[36]">EnterSecuCfg</a> from setttingmainmenu.o(i.EnterSecuCfg) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[a7]">EnterSecuProc</a> from entersecusettingmenu.o(i.EnterSecuProc) referenced from entersecusettingmenu.o(.data)
 <LI><a href="#[9f]">EnterTCICAL</a> from typecgaugeconfigmenu.o(i.EnterTCICAL) referenced from typecgaugeconfigmenu.o(.constdata)
 <LI><a href="#[83]">EnterTCResetMenu</a> from typecconnreset.o(i.EnterTCResetMenu) referenced from typecconnreset.o(.constdata)
 <LI><a href="#[9e]">EnterTCVCAL</a> from typecgaugeconfigmenu.o(i.EnterTCVCAL) referenced from typecgaugeconfigmenu.o(.constdata)
 <LI><a href="#[3a]">EnterTset</a> from setttingmainmenu.o(i.EnterTset) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[47]">EnterTypeCGaugeConfig</a> from setttingmainmenu.o(i.EnterTypeCGaugeConfig) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[80]">ExitAdapterEmulation</a> from adapteremulationmenu.o(i.ExitAdapterEmulation) referenced from adapteremulationmenu.o(.constdata)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[96]">FedBalEnumValue</a> from balsysmenu.o(i.FedBalEnumValue) referenced from balsysmenu.o(.constdata)
 <LI><a href="#[85]">FedDisplayEnumValue</a> from displaydirmenu.o(i.FedDisplayEnumValue) referenced from displaydirmenu.o(.constdata)
 <LI><a href="#[8c]">FedIStopEnumValue</a> from istopmenu.o(i.FedIStopEnumValue) referenced 2 times from istopmenu.o(.constdata)
 <LI><a href="#[34]">FedLVEnumValue</a> from lvsetmenu.o(i.FedLVEnumValue) referenced from lvsetmenu.o(.constdata)
 <LI><a href="#[91]">FedMaxVPDEnumValue</a> from maxvpdconfigmenu.o(i.FedMaxVPDEnumValue) referenced from maxvpdconfigmenu.o(.constdata)
 <LI><a href="#[32]">FedPWREnumValue</a> from chargepowermenu.o(i.FedPWREnumValue) referenced 2 times from chargepowermenu.o(.constdata)
 <LI><a href="#[8a]">FedRechargeEnumValue</a> from vrechargemenu.o(i.FedRechargeEnumValue) referenced from vrechargemenu.o(.constdata)
 <LI><a href="#[a1]">FedTCSourceEnumValue</a> from typeccalibrationsource.o(i.FedTCSourceEnumValue) referenced from typeccalibrationsource.o(.constdata)
 <LI><a href="#[17]">GPTM0_IRQHandler</a> from ht32f5xxxx_01_it.o(i.GPTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a3]">ICALMenuDummy</a> from typeccalibrationset.o(i.ICALMenuDummy) referenced from typeccalibrationset.o(.constdata)
 <LI><a href="#[65]">ISetMenuDummy</a> from setchargecurrentmenu.o(i.ISetMenuDummy) referenced from setchargecurrentmenu.o(.constdata)
 <LI><a href="#[66]">IntEditInitHandler</a> from inteditmenu.o(i.IntEditInitHandler) referenced 6 times from setchargecurrentmenu.o(.constdata)
 <LI><a href="#[c]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[93]">LargeMainMenuKeyProcess</a> from largemainmenu.o(i.LargeMainMenuKeyProcess) referenced from largemainmenu.o(.constdata)
 <LI><a href="#[92]">LargeMenuRenderProc</a> from largemainmenu.o(i.LargeMenuRenderProc) referenced from largemainmenu.o(.constdata)
 <LI><a href="#[35]">LeaveDisMgmtMenu</a> from dischargemgmtmenu.o(i.LeaveDisMgmtMenu) referenced 4 times from dischargemgmtmenu.o(.constdata)
 <LI><a href="#[35]">LeaveDisMgmtMenu</a> from dischargemgmtmenu.o(i.LeaveDisMgmtMenu) referenced from entersecusettingmenu.o(.data)
 <LI><a href="#[87]">LeaveICTMenu</a> from enableinstcaptmenu.o(i.LeaveICTMenu) referenced from enableinstcaptmenu.o(.constdata)
 <LI><a href="#[8e]">LeaveSafeAlmMenu</a> from safetyalertmenu.o(i.LeaveSafeAlmMenu) referenced from safetyalertmenu.o(.constdata)
 <LI><a href="#[15]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[30]">MainMenuKeyProcess</a> from mainmenu.o(i.MainMenuKeyProcess) referenced from mainmenu.o(.constdata)
 <LI><a href="#[2f]">MainMenuRenderProcess</a> from mainmenu.o(i.MainMenuRenderProcess) referenced from mainmenu.o(.constdata)
 <LI><a href="#[4a]">ManuallyShutSystemOFF</a> from setttingmainmenu.o(i.ManuallyShutSystemOFF) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[7]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[27]">PDMA_CH0_1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.PDMA_CH0_1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[28]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[76]">PasswordEnterInit</a> from enterpasswordmenu.o(i.PasswordEnterInit) referenced 2 times from enteradvancedmodemenu.o(.constdata)
 <LI><a href="#[a]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[69]">PreISetMenuDummy</a> from prechargecurrentsetmenu.o(i.PreISetMenuDummy) referenced from prechargecurrentsetmenu.o(.constdata)
 <LI><a href="#[7a]">PrepareAboutRender</a> from aboutmenu.o(i.PrepareAboutRender) referenced from aboutmenu.o(.constdata)
 <LI><a href="#[74]">PreparePDO20VStr</a> from pdosetmenu.o(i.PreparePDO20VStr) referenced from pdosetmenu.o(.constdata)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[95]">ReadBalEnumValue</a> from balsysmenu.o(i.ReadBalEnumValue) referenced from balsysmenu.o(.constdata)
 <LI><a href="#[84]">ReadDisplayEnumValue</a> from displaydirmenu.o(i.ReadDisplayEnumValue) referenced from displaydirmenu.o(.constdata)
 <LI><a href="#[8b]">ReadIStopEnumValue</a> from istopmenu.o(i.ReadIStopEnumValue) referenced 2 times from istopmenu.o(.constdata)
 <LI><a href="#[33]">ReadLVEnumValue</a> from lvsetmenu.o(i.ReadLVEnumValue) referenced from lvsetmenu.o(.constdata)
 <LI><a href="#[90]">ReadMaxVPDEnumValue</a> from maxvpdconfigmenu.o(i.ReadMaxVPDEnumValue) referenced from maxvpdconfigmenu.o(.constdata)
 <LI><a href="#[31]">ReadPWREnumValue</a> from chargepowermenu.o(i.ReadPWREnumValue) referenced 2 times from chargepowermenu.o(.constdata)
 <LI><a href="#[89]">ReadRechargeEnumValue</a> from vrechargemenu.o(i.ReadRechargeEnumValue) referenced from vrechargemenu.o(.constdata)
 <LI><a href="#[a0]">ReadTCSourceEnumValue</a> from typeccalibrationsource.o(i.ReadTCSourceEnumValue) referenced from typeccalibrationsource.o(.constdata)
 <LI><a href="#[58]">ResetCTest</a> from restorefactorysetmenu.o(i.ResetCTest) referenced from restorefactorysetmenu.o(.constdata)
 <LI><a href="#[56]">ResetCapTestSystem</a> from captestmenu.o(i.ResetCapTestSystem) referenced 2 times from captestmenu.o(.constdata)
 <LI><a href="#[71]">ResetChipMenuState</a> from viewchipstatemenu.o(i.ResetChipMenuState) referenced from viewchipstatemenu.o(.constdata)
 <LI><a href="#[6e]">ResetColHisMenuToUpper</a> from columgaugeviewmenu.o(i.ResetColHisMenuToUpper) referenced from columgaugeviewmenu.o(.constdata)
 <LI><a href="#[5e]">ResetColumData</a> from resetconfigmenu.o(i.ResetColumData) referenced from resetconfigmenu.o(.constdata)
 <LI><a href="#[59]">ResetColumGauge</a> from restorefactorysetmenu.o(i.ResetColumGauge) referenced 2 times from restorefactorysetmenu.o(.constdata)
 <LI><a href="#[63]">ResetHisMenuToUpper</a> from displaylastctestmenu.o(i.ResetHisMenuToUpper) referenced from displaylastctestmenu.o(.constdata)
 <LI><a href="#[99]">ResetManuBalModule</a> from manustartbalancemenu.o(i.ResetManuBalModule) referenced 2 times from manustartbalancemenu.o(.constdata)
 <LI><a href="#[57]">ResetSysCfg</a> from restorefactorysetmenu.o(i.ResetSysCfg) referenced from restorefactorysetmenu.o(.constdata)
 <LI><a href="#[6]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[64]">ReturnFromIset</a> from setchargecurrentmenu.o(i.ReturnFromIset) referenced 2 times from setchargecurrentmenu.o(.constdata)
 <LI><a href="#[68]">ReturnFromPreIset</a> from prechargecurrentsetmenu.o(i.ReturnFromPreIset) referenced from prechargecurrentsetmenu.o(.constdata)
 <LI><a href="#[5a]">ReturnFromRSTMenu</a> from restorefactorysetmenu.o(i.ReturnFromRSTMenu) referenced from restorefactorysetmenu.o(.constdata)
 <LI><a href="#[6a]">ReturnFromVset</a> from chargevoltset.o(i.ReturnFromVset) referenced from chargevoltset.o(.constdata)
 <LI><a href="#[4c]">ReturnToMainMenu</a> from setttingmainmenu.o(i.ReturnToMainMenu) referenced from setttingmainmenu.o(.constdata)
 <LI><a href="#[53]">ReturnToMainSetMenu</a> from chargingsystemmenu.o(i.ReturnToMainSetMenu) referenced 2 times from chargingsystemmenu.o(.constdata)
 <LI><a href="#[a2]">ReturnToTCCalMenu</a> from typeccalibrationset.o(i.ReturnToTCCalMenu) referenced 2 times from typeccalibrationset.o(.constdata)
 <LI><a href="#[24]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5f]">SelectResetCTest</a> from resetconfigmenu.o(i.SelectResetCTest) referenced from resetconfigmenu.o(.constdata)
 <LI><a href="#[60]">SelectResetConfig</a> from resetconfigmenu.o(i.SelectResetConfig) referenced from resetconfigmenu.o(.constdata)
 <LI><a href="#[37]">SendTCResetCommand</a> from setttingmainmenu.o(i.SendTCResetCommand) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[38]">SetDisplayDir</a> from setttingmainmenu.o(i.SetDisplayDir) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[61]">ShowCapHisGUI</a> from displaylastctestmenu.o(i.ShowCapHisGUI) referenced from displaylastctestmenu.o(.constdata)
 <LI><a href="#[6f]">ShowChipInfo</a> from viewchipstatemenu.o(i.ShowChipInfo) referenced from viewchipstatemenu.o(.constdata)
 <LI><a href="#[70]">ShowChipKeyHandler</a> from viewchipstatemenu.o(i.ShowChipKeyHandler) referenced from viewchipstatemenu.o(.constdata)
 <LI><a href="#[6c]">ShowColHisGUI</a> from columgaugeviewmenu.o(i.ShowColHisGUI) referenced from columgaugeviewmenu.o(.constdata)
 <LI><a href="#[b]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7c]">TSetMenuDummy</a> from otptempset.o(i.TSetMenuDummy) referenced from otptempset.o(.constdata)
 <LI><a href="#[82]">TypeCResetKeyHandler</a> from typecconnreset.o(i.TypeCResetKeyHandler) referenced from typecconnreset.o(.constdata)
 <LI><a href="#[81]">TypeCResetRender</a> from typecconnreset.o(i.TypeCResetRender) referenced from typecconnreset.o(.constdata)
 <LI><a href="#[22]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">UART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a4]">VCALMenuDummy</a> from typeccalibrationset.o(i.VCALMenuDummy) referenced from typeccalibrationset.o(.constdata)
 <LI><a href="#[6b]">VSetMenuDummy</a> from chargevoltset.o(i.VSetMenuDummy) referenced from chargevoltset.o(.constdata)
 <LI><a href="#[75]">VerifyPassWhenAdvMode</a> from enteradvancedmodemenu.o(i.VerifyPassWhenAdvMode) referenced from enteradvancedmodemenu.o(.constdata)
 <LI><a href="#[77]">VerifyPassWhenSecuEnter</a> from entersecusettingmenu.o(i.VerifyPassWhenSecuEnter) referenced from entersecusettingmenu.o(.constdata)
 <LI><a href="#[48]">ViewChipState</a> from setttingmainmenu.o(i.ViewChipState) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[45]">ViewColData</a> from setttingmainmenu.o(i.ViewColData) referenced 2 times from setttingmainmenu.o(.constdata)
 <LI><a href="#[a8]">__main</a> from __main.o(!!!main) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2e]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[2d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2c]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[28]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[ae]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[af]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[b1]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[b3]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b6]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[209]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[20a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[20b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cf]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b8]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[20c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[20e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[210]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[212]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[214]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[215]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[216]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[217]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[218]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[219]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[220]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[223]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[224]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[225]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[226]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[227]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b5]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[228]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[229]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RunLogModule_POR &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[101]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[22b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ca]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
</UL>

<P><STRONG><a name="[cd]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1c5]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
</UL>

<P><STRONG><a name="[d1]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[d0]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparePDO20VStr
</UL>

<P><STRONG><a name="[d5]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d4]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreparePDO20VStr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogDataSectionInit
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTimeCode
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdateFullVoltage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetICCMax
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[230]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[233]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[d6]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[d9]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[da]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[dc]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[db]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
</UL>

<P><STRONG><a name="[234]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[235]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[236]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[237]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[238]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestFSMHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
</UL>

<P><STRONG><a name="[e1]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[e0]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[239]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRechargeEnumValue
</UL>

<P><STRONG><a name="[23a]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
</UL>

<P><STRONG><a name="[23b]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
</UL>

<P><STRONG><a name="[e5]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e7]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[23c]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[cb]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[cc]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[2c]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[1ee]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f3]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[bc]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[23d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ef]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e9]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ec]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[eb]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fb]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[f0]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[fc]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1fe]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[f5]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[23f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[240]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c5]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ff]"></a>strcmp</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[fd]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[fe]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[c9]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[241]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOC_interrupt_Callback
</UL>

<P><STRONG><a name="[243]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[102]"></a>ADC_EOC_interrupt_Callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_EOC_interrupt_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_EOC_interrupt_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>ADC_GetIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>ADC_GetResult</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, adc.o(i.ADC_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>ADC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler &rArr; ADC_EOC_interrupt_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIntStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOC_interrupt_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>ADC_IntConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[106]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[105]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[1a2]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[1a1]"></a>ADC_SamplingTimeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SamplingTimeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[107]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[1d7]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
</UL>

<P><STRONG><a name="[19e]"></a>AFIO_GPxConfig</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[119]"></a>AboutEasterEgg</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, aboutmenu.o(i.AboutEasterEgg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[79]"></a>AboutMenuKeyProc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aboutmenu.o(i.AboutMenuKeyProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AboutMenuKeyProc &rArr; SetDebugPortState &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aboutmenu.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>AboutMenuRender</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, aboutmenu.o(i.AboutMenuRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AboutMenuRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTextGen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aboutmenu.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>ActOneShotTest</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.ActOneShotTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ActOneShotTest &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>AdapterEmuRender</STRONG> (Thumb, 1872 bytes, Stack size 40 bytes, adapteremulationmenu.o(i.AdapterEmuRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AdapterEmuRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapteremulationmenu.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>AdapterMenuKeyProc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adapteremulationmenu.o(i.AdapterMenuKeyProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AdapterMenuKeyProc &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapteremulationmenu.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>ApplyScreenDirection</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, screendirset.o(i.ApplyScreenDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ApplyScreenDirection &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ce]"></a>AttackDetectInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, enterpasswordmenu.o(i.AttackDetectInit))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
</UL>

<P><STRONG><a name="[12f]"></a>AttackTimeCounter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, enterpasswordmenu.o(i.AttackTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AttackTimeCounter &rArr; ForceWriteRuntimelog &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>AutoBalMenuKeyHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, autoextendbalancemenu.o(i.AutoBalMenuKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AutoBalMenuKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoextendbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>AutoBalMenuRenderHandler</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, autoextendbalancemenu.o(i.AutoBalMenuRenderHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AutoBalMenuRenderHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoextendbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>BackFromEsetupToMainMenu</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, easysetupmenu.o(i.BackFromEsetupToMainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BackFromEsetupToMainMenu &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easysetupmenu.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>BackFromGUIPref</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guiprefmenu.o(i.BackFromGUIPref))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BackFromGUIPref &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiprefmenu.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>BackFromTset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, otptempset.o(i.BackFromTset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BackFromTset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otptempset.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>BackToEasySetup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enteradvancedmodemenu.o(i.BackToEasySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BackToEasySetup &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enteradvancedmodemenu.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>BackToResetMenu</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, resetconfigmenu.o(i.BackToResetMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BackToResetMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 3]<UL><LI> resetconfigmenu.o(.constdata)
<LI> resetconfigmenu.o(.constdata)
<LI> resetconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>BalMenuFSMProcess</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, manustartbalancemenu.o(i.BalMenuFSMProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BalMenuFSMProcess &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> manustartbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>BalMenuGUIHandler</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, manustartbalancemenu.o(i.BalMenuGUIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BalMenuGUIHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> manustartbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>BalanceMgmt_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, balancemgmt.o(i.BalanceMgmt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BalanceMgmt_Init &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>Balance_ForceDiasble</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, balancemgmt.o(i.Balance_ForceDiasble))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Balance_ForceDiasble &rArr; PCA9536_SetIOState &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuallyShutSystemOFF
</UL>

<P><STRONG><a name="[13a]"></a>Balance_IOMgmt</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, balancemgmt.o(i.Balance_IOMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Balance_IOMgmt &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetIfInputConnected
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>CKCU_GetClockReadyStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClockReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[151]"></a>CKCU_HSICmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[147]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProgramRegionCRC
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCapDataCRC32
</UL>

<P><STRONG><a name="[1a0]"></a>CKCU_SetADCnPrescaler</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetADCnPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CKCU_SetADCnPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[13d]"></a>CRC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_crc.o(i.CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProgramRegionCRC
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCapDataCRC32
</UL>

<P><STRONG><a name="[14b]"></a>CRC_Process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_crc.o(i.CRC_Process))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
</UL>

<P><STRONG><a name="[13f]"></a>CTestAverageACC</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, captestmenu.o(i.CTestAverageACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CTestAverageACC &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>CTestFSMHandler</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, captestmenu.o(i.CTestFSMHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CTestFSMHandler &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCapData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>CTestGUIHandler</STRONG> (Thumb, 2762 bytes, Stack size 40 bytes, captestmenu.o(i.CTestGUIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CTestGUIHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> captestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>CTestKeyHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, captestmenu.o(i.CTestKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CTestKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> captestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>CalcCapDataCRC32</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, captestmgmt.o(i.CalcCapDataCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcCapDataCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCapData
</UL>

<P><STRONG><a name="[5b]"></a>CalcIfNeedToReset</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, restorefactorysetmenu.o(i.CalcIfNeedToReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CalcIfNeedToReset &rArr; CalcROMCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> restorefactorysetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>CalcLogContentCRC32</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, logsystem.o(i.CalcLogContentCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcLogContentCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Process
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
</UL>

<P><STRONG><a name="[148]"></a>CalcROMCRC32</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, config.o(i.CalcROMCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcROMCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIfNeedToReset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfConfigIsSame
</UL>

<P><STRONG><a name="[131]"></a>CalcRunLogCRC32</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, logsystem.o(i.CalcRunLogCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcRunLogCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuKeyHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuFSMProcess
</UL>

<P><STRONG><a name="[62]"></a>CapHisKeyHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, displaylastctestmenu.o(i.CapHisKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CapHisKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaylastctestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>CheckForFlashLock</STRONG> (Thumb, 516 bytes, Stack size 80 bytes, flashprot.o(i.CheckForFlashLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CheckForFlashLock &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetOptionByteStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_HSICmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClockReadyStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProgramRegionCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>CheckILimitIsOK</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, setchargecurrentmenu.o(i.CheckILimitIsOK))
<BR>[Address Reference Count : 1]<UL><LI> setchargecurrentmenu.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>CheckIfConfigIsSame</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, config.o(i.CheckIfConfigIsSame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckIfConfigIsSame &rArr; M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
</UL>

<P><STRONG><a name="[15b]"></a>CheckIfHBTIMStart</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mcubeattimer.o(i.CheckIfHBTIMStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CheckIfHBTIMStart &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_GetResetFlagStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>ClearHistoryData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, captestmgmt.o(i.ClearHistoryData))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectResetCTest
</UL>

<P><STRONG><a name="[6d]"></a>ColHisKeyHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, columgaugeviewmenu.o(i.ColHisKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ColHisKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> columgaugeviewmenu.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>DetectIfIP2366Reset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ip2366_init.o(i.DetectIfIP2366Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DetectIfIP2366Reset &rArr; IP2366_ReInitBasedOnConfig &rArr; IP2366_SetVLowVolt &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetICCMax
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetIfInputConnected
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_DetectIfChipReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>DisplayAlertMsg</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, safetyalertmenu.o(i.DisplayAlertMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayAlertMsg &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> safetyalertmenu.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>DisplayResetOK</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, resetconfigmenu.o(i.DisplayResetOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayResetOK &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
</UL>
<BR>[Address Reference Count : 3]<UL><LI> resetconfigmenu.o(.constdata)
<LI> resetconfigmenu.o(.constdata)
<LI> resetconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>DisplaySuccEnteredCapStart</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, enableinstcaptmenu.o(i.DisplaySuccEnteredCapStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplaySuccEnteredCapStart &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enableinstcaptmenu.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; SideKey_IntCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_IntCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_IntCallback
</UL>

<P><STRONG><a name="[1da]"></a>EXTI_GetEdgeFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_IntCallback
</UL>

<P><STRONG><a name="[1d8]"></a>EXTI_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
</UL>

<P><STRONG><a name="[1d9]"></a>EXTI_IntConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_IntCallback
</UL>

<P><STRONG><a name="[9c]"></a>EnableAutoBal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, autoextendbalancemenu.o(i.EnableAutoBal))
<BR>[Address Reference Count : 1]<UL><LI> autoextendbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>EnableHBTimer</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mcubeattimer.o(i.EnableHBTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = EnableHBTimer &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>EnableICTestMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, enableinstcaptmenu.o(i.EnableICTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EnableICTestMode &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enableinstcaptmenu.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>EnterAbout</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterAbout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterAbout &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>EnterAdapterEmu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterAdapterEmu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterAdapterEmu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>EnterAdapterEmulation</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, adapteremulationmenu.o(i.EnterAdapterEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EnterAdapterEmulation &rArr; IP2366_SetTypeCRole &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapteremulationmenu.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>EnterAdvMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, easysetupmenu.o(i.EnterAdvMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterAdvMode &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easysetupmenu.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>EnterAdvModeProc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enteradvancedmodemenu.o(i.EnterAdvModeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterAdvModeProc &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuKeyProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMainMenuKeyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enteradvancedmodemenu.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>EnterBalCfg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterBalCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterBalCfg &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>EnterCTHistory</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterCTHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterCTHistory &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>EnterChargeTest</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterChargeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterChargeTest &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>EnterChgMgmt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterChgMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterChgMgmt &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>EnterChgVsetMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterChgVsetMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterChgVsetMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>EnterDisMgmt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterDisMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterDisMgmt &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>EnterDsourceSel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typecgaugeconfigmenu.o(i.EnterDsourceSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterDsourceSel &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typecgaugeconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>EnterGUIPref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterGUIPref))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterGUIPref &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>EnterIChargeSet</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterIChargeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterIChargeSet &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>EnterIstopMenu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterIstopMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterIstopMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>EnterLVSet</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterLVSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterLVSet &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>EnterManuBal</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterManuBal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterManuBal &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>EnterMaxVPDMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterMaxVPDMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterMaxVPDMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>EnterPDOConfig</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterPDOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterPDOConfig &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>EnterPSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterPSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterPSet &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>EnterPreChargeIset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterPreChargeIset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterPreChargeIset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>EnterRechargeSetMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.EnterRechargeSetMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterRechargeSetMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargingsystemmenu.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>EnterResetFactory</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterResetFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterResetFactory &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>EnterSafeAlmMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, safetyalertmenu.o(i.EnterSafeAlmMode))
<BR>[Address Reference Count : 1]<UL><LI> safetyalertmenu.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>EnterSecuCfg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterSecuCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterSecuCfg &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>EnterSecuProc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, entersecusettingmenu.o(i.EnterSecuProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterSecuProc &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entersecusettingmenu.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>EnterTCICAL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typecgaugeconfigmenu.o(i.EnterTCICAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterTCICAL &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typecgaugeconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>EnterTCResetMenu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, typecconnreset.o(i.EnterTCResetMenu))
<BR>[Address Reference Count : 1]<UL><LI> typecconnreset.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>EnterTCVCAL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typecgaugeconfigmenu.o(i.EnterTCVCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterTCVCAL &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typecgaugeconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>EnterTset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterTset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterTset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>EnterTypeCGaugeConfig</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.EnterTypeCGaugeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnterTypeCGaugeConfig &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>EnteredInstantCapTest</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, instantcaptest.o(i.EnteredInstantCapTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnteredInstantCapTest &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>ExitAdapterEmulation</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adapteremulationmenu.o(i.ExitAdapterEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExitAdapterEmulation &rArr; IP2366_SetTypeCRole &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapteremulationmenu.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>FLASH_EraseOptionByte</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_EraseOptionByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_EraseOptionByte &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[153]"></a>FLASH_ErasePage</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[14d]"></a>FLASH_GetOptionByteStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ht32f5xxxx_flash.o(i.FLASH_GetOptionByteStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[157]"></a>FLASH_ProgramOptionByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ht32f5xxxx_flash.o(i.FLASH_ProgramOptionByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramOptionByte &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[154]"></a>FLASH_ProgramWordData</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_ProgramWordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ProgramWordData &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_WaitForOperationEnd</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_WaitForOperationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByte
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionByte
</UL>

<P><STRONG><a name="[96]"></a>FedBalEnumValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, balsysmenu.o(i.FedBalEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedBalEnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> balsysmenu.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>FedDisplayEnumValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaydirmenu.o(i.FedDisplayEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FedDisplayEnumValue &rArr; SetScreenDirection &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreenDirection
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaydirmenu.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>FedIStopEnumValue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, istopmenu.o(i.FedIStopEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedIStopEnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> istopstdmenu.o(.constdata)
<LI> istopmenu.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>FedLVEnumValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lvsetmenu.o(i.FedLVEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedLVEnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvsetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>FedMaxVPDEnumValue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, maxvpdconfigmenu.o(i.FedMaxVPDEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FedMaxVPDEnumValue &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxvpdconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>FedPWREnumValue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chargepowermenu.o(i.FedPWREnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedPWREnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> chargepowermenu.o(.constdata)
<LI> chgpowerwithoutepr.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>FedRechargeEnumValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vrechargemenu.o(i.FedRechargeEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedRechargeEnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vrechargemenu.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>FedTCSourceEnumValue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, typeccalibrationsource.o(i.FedTCSourceEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FedTCSourceEnumValue &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typeccalibrationsource.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>ForceWriteRuntimelog</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, logsystem.o(i.ForceWriteRuntimelog))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ForceWriteRuntimelog &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackTimeCounter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
</UL>

<P><STRONG><a name="[116]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreenDirection
</UL>

<P><STRONG><a name="[177]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[19f]"></a>GPIO_DriveConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ht32f5xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
</UL>

<P><STRONG><a name="[178]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[1c8]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
</UL>

<P><STRONG><a name="[179]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[110]"></a>GPIO_ReadOutBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadOutBit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[117]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[17]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_01_it.o(i.GPTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetFlagStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1fa]"></a>GUIDelayHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menusystem.o(i.GUIDelayHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>HPPowerGuage_Start</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, hptypecgauge.o(i.HPPowerGuage_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HPPowerGuage_Start &rArr; INA226_INIT &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_SetAlertRegister
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_QueueIfGaugeCanReady
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ICALMenuDummy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typeccalibrationset.o(i.ICALMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ICALMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typeccalibrationset.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>IIC_Read_Byte</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[17a]"></a>IIC_Send_Byte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[17b]"></a>IIC_Start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2cdrv.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[17c]"></a>IIC_Stop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, i2cdrv.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[17d]"></a>IIC_Wait_Ack</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadUID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_ReadSecuSct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOPolarity
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIODirection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[174]"></a>INA226_GetBusInformation</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ina226.o(i.INA226_GetBusInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = INA226_GetBusInformation &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
</UL>

<P><STRONG><a name="[171]"></a>INA226_INIT</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, ina226.o(i.INA226_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = INA226_INIT &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
</UL>

<P><STRONG><a name="[173]"></a>INA226_QueueIfGaugeCanReady</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ina226.o(i.INA226_QueueIfGaugeCanReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = INA226_QueueIfGaugeCanReady &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
</UL>

<P><STRONG><a name="[172]"></a>INA226_SetAlertRegister</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ina226.o(i.INA226_SetAlertRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = INA226_SetAlertRegister &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
</UL>

<P><STRONG><a name="[160]"></a>IP2366StallRestore</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, pmsetup.o(i.IP2366StallRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IP2366StallRestore
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
</UL>

<P><STRONG><a name="[181]"></a>IP2366_ClearOCFlag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ip2366_reg.o(i.IP2366_ClearOCFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP2366_ClearOCFlag &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCResetFSM
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[15e]"></a>IP2366_DetectIfChipReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_DetectIfChipReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_DetectIfChipReset &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
</UL>

<P><STRONG><a name="[184]"></a>IP2366_DetectIfPresent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ip2366_reg.o(i.IP2366_DetectIfPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP2366_DetectIfPresent &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
</UL>

<P><STRONG><a name="[123]"></a>IP2366_EnableDCDC</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_EnableDCDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_EnableDCDC &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitAdapterEmulation
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[13b]"></a>IP2366_GetChargerState</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_GetChargerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_GetChargerState &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIfSysCanOFF
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
</UL>

<P><STRONG><a name="[185]"></a>IP2366_GetCurrentPeakCurrent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_GetCurrentPeakCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_GetCurrentPeakCurrent &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[186]"></a>IP2366_GetFirmwareTimeStamp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_GetFirmwareTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IP2366_GetFirmwareTimeStamp &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[13c]"></a>IP2366_GetIfInputConnected</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ip2366_reg.o(i.IP2366_GetIfInputConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP2366_GetIfInputConnected &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetIBatLIMBaseOnSysCfg
</UL>

<P><STRONG><a name="[187]"></a>IP2366_GetRecvPDO</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_GetRecvPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_GetRecvPDO &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[188]"></a>IP2366_GetVBUSState</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, ip2366_reg.o(i.IP2366_GetVBUSState))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IP2366_GetVBUSState &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
</UL>

<P><STRONG><a name="[189]"></a>IP2366_GetVRecharge</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_GetVRecharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_GetVRecharge &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[18b]"></a>IP2366_PostInit</STRONG> (Thumb, 906 bytes, Stack size 48 bytes, ip2366_init.o(i.IP2366_PostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IP2366_PostInit &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetVLowVolt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetReChargeParam
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetPDOBroadCast
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOTPSign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ClearOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>IP2366_PreInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ip2366_init.o(i.IP2366_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IP2366_PreInit &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetIfInputConnected
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_DetectIfPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>IP2366_QueryCurrentStateIsACC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ip2366_reg.o(i.IP2366_QueryCurrentStateIsACC))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
</UL>

<P><STRONG><a name="[193]"></a>IP2366_ReConfigOutWhenTypeCOFF</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip2366_init.o(i.IP2366_ReConfigOutWhenTypeCOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IP2366_ReConfigOutWhenTypeCOFF &rArr; IP2366_SetTypeCRole &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOTPSign
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>IP2366_ReInitBasedOnConfig</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, ip2366_init.o(i.IP2366_ReInitBasedOnConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IP2366_ReInitBasedOnConfig &rArr; IP2366_SetVLowVolt &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetVLowVolt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetPDOBroadCast
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOTPSign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ClearOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
</UL>

<P><STRONG><a name="[194]"></a>IP2366_ReadChipState</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ip2366_reg.o(i.IP2366_ReadChipState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IP2366_ReadChipState &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[195]"></a>IP2366_SetIBatLIMBaseOnSysCfg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ip2366_init.o(i.IP2366_SetIBatLIMBaseOnSysCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IP2366_SetIBatLIMBaseOnSysCfg &rArr; IP2366_SetICCMax &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetICCMax
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetIfInputConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
</UL>

<P><STRONG><a name="[161]"></a>IP2366_SetICCMax</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetICCMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetICCMax &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetIBatLIMBaseOnSysCfg
</UL>

<P><STRONG><a name="[18f]"></a>IP2366_SetInputState</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetInputState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetInputState &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[191]"></a>IP2366_SetOTPSign</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ip2366_reg.o(i.IP2366_SetOTPSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP2366_SetOTPSign &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReConfigOutWhenTypeCOFF
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[18e]"></a>IP2366_SetOutputState</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetOutputState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetOutputState &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReConfigOutWhenTypeCOFF
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[190]"></a>IP2366_SetPDOBroadCast</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetPDOBroadCast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetPDOBroadCast &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[18c]"></a>IP2366_SetReChargeParam</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetReChargeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetReChargeParam &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
</UL>

<P><STRONG><a name="[124]"></a>IP2366_SetTypeCRole</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetTypeCRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetTypeCRole &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCResetFSM
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReConfigOutWhenTypeCOFF
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitAdapterEmulation
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[18d]"></a>IP2366_SetVLowVolt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_SetVLowVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_SetVLowVolt &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
</UL>

<P><STRONG><a name="[196]"></a>IP2366_Telem</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, mainmenu.o(i.IP2366_Telem))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IP2366_Telem &rArr; INA226_GetBusInformation &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadChipState
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetRecvPDO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>IP2366_UpdataChargePower</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_UpdataChargePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_UpdataChargePower &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
</UL>

<P><STRONG><a name="[198]"></a>IP2366_UpdateFullVoltage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ip2366_reg.o(i.IP2366_UpdateFullVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IP2366_UpdateFullVoltage &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverChargeDetectModule
</UL>

<P><STRONG><a name="[199]"></a>IP2366_getCurrentChargeParam</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_getCurrentChargeParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IP2366_getCurrentChargeParam &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[65]"></a>ISetMenuDummy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, setchargecurrentmenu.o(i.ISetMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ISetMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setchargecurrentmenu.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>IntEditHandler</STRONG> (Thumb, 1216 bytes, Stack size 32 bytes, inteditmenu.o(i.IntEditHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIncDec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSetMenuDummy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreISetMenuDummy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISetMenuDummy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCALMenuDummy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICALMenuDummy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSetMenuDummy
</UL>

<P><STRONG><a name="[66]"></a>IntEditInitHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inteditmenu.o(i.IntEditInitHandler))
<BR>[Address Reference Count : 6]<UL><LI> prechargecurrentsetmenu.o(.constdata)
<LI> otptempset.o(.constdata)
<LI> setchargecurrentmenu.o(.constdata)
<LI> chargevoltset.o(.constdata)
<LI> typeccalibrationset.o(.constdata)
<LI> typeccalibrationset.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>IntEditMenuKeyEffHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, inteditmenu.o(i.IntEditMenuKeyEffHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>IntIncDec</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, incdec.o(i.IntIncDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntIncDec
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>

<P><STRONG><a name="[19d]"></a>InternalADC_Init</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, adc.o(i.InternalADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = InternalADC_Init &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCnPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>KickIP2366ToWakeUp</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, pmsetup.o(i.KickIP2366ToWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = KickIP2366ToWakeUp &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>LCD_Address_Set</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lcd_init.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
</UL>

<P><STRONG><a name="[1a9]"></a>LCD_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_init.o(i.LCD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
</UL>

<P><STRONG><a name="[19c]"></a>LCD_DrawLine</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawVertLine &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
</UL>

<P><STRONG><a name="[1b0]"></a>LCD_DrawPoint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
</UL>

<P><STRONG><a name="[19b]"></a>LCD_DrawRectangle</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lcd.o(i.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_DrawVertLine &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
</UL>

<P><STRONG><a name="[133]"></a>LCD_Fill</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMACmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuKeyHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMainMenuKeyProcess
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFromEsetupToMainMenu
</UL>

<P><STRONG><a name="[1b1]"></a>LCD_HardwareInit</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, lcd_init.o(i.LCD_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_HardwareInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_ClearFlag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IntConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>LCD_Init</STRONG> (Thumb, 1134 bytes, Stack size 24 bytes, lcd_init.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockPrescaler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreenDirection
</UL>

<P><STRONG><a name="[121]"></a>LCD_ShowChar</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
</UL>

<P><STRONG><a name="[11a]"></a>LCD_ShowChinese</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_ShowChinese &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayResetOK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlertMsg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccEnteredCapStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeCResetRender
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutEasterEgg
</UL>

<P><STRONG><a name="[129]"></a>LCD_ShowChinese12x12</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, lcd.o(i.LCD_ShowChinese12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTimeCode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[126]"></a>LCD_ShowFloatNum1</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, lcd.o(i.LCD_ShowFloatNum1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[120]"></a>LCD_ShowHybridString</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowHybridString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
</UL>

<P><STRONG><a name="[128]"></a>LCD_ShowIntNum</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowIntNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTimeCode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[144]"></a>LCD_ShowPicture</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd.o(i.LCD_ShowPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ShowPicture &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
</UL>

<P><STRONG><a name="[11b]"></a>LCD_ShowString</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayResetOK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccEnteredCapStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeCResetRender
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutEasterEgg
</UL>

<P><STRONG><a name="[1af]"></a>LCD_WR_DATA</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_init.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[93]"></a>LargeMainMenuKeyProcess</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, largemainmenu.o(i.LargeMainMenuKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LargeMainMenuKeyProcess &rArr; EnterAdvModeProc &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdvModeProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> largemainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>LargeMenuRenderProc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, largemainmenu.o(i.LargeMenuRenderProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LargeMenuRenderProc &rArr; RenderBattState &rArr; LargeMenu_DisplayWh &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> largemainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>LeaveDisMgmtMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dischargemgmtmenu.o(i.LeaveDisMgmtMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LeaveDisMgmtMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 5]<UL><LI> dischargemgmtmenu.o(.constdata)
<LI> dischargemgmtmenu.o(.constdata)
<LI> entersecusettingmenu.o(.data)
<LI> pdosetmenu.o(.constdata)
<LI> systemsecumenu.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>LeaveICTMenu</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, enableinstcaptmenu.o(i.LeaveICTMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LeaveICTMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enableinstcaptmenu.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>LeaveSafeAlmMenu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, safetyalertmenu.o(i.LeaveSafeAlmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LeaveSafeAlmMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> safetyalertmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>LoadConfig</STRONG> (Thumb, 356 bytes, Stack size 104 bytes, config.o(i.LoadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LoadConfig &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>LoadDefaultConfig</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, config.o(i.LoadDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIfNeedToReset
</UL>

<P><STRONG><a name="[1bd]"></a>LogDataSectionInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, logsystem.o(i.LogDataSectionInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[15a]"></a>M24C512_PageRead</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, 24cxx.o(i.M24C512_PageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCapData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfConfigIsSame
</UL>

<P><STRONG><a name="[16e]"></a>M24C512_PageWrite</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, 24cxx.o(i.M24C512_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCapData
</UL>

<P><STRONG><a name="[14f]"></a>M24C512_ReadSecuSct</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, 24cxx.o(i.M24C512_ReadSecuSct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M24C512_ReadSecuSct &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[14e]"></a>M24C512_ReadUID</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, 24cxx.o(i.M24C512_ReadUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M24C512_ReadUID &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[155]"></a>M24C512_WriteSecuSct</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, 24cxx.o(i.M24C512_WriteSecuSct))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M24C512_WriteSecuSct &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[30]"></a>MainMenuKeyProcess</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mainmenu.o(i.MainMenuKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MainMenuKeyProcess &rArr; EnterAdvModeProc &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdvModeProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>MainMenuRenderProcess</STRONG> (Thumb, 2032 bytes, Stack size 40 bytes, mainmenu.o(i.MainMenuRenderProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MainMenuRenderProcess &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>MainProgramRegionCRC</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, flashprot.o(i.MainProgramRegionCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainProgramRegionCRC &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[4a]"></a>ManuallyShutSystemOFF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, setttingmainmenu.o(i.ManuallyShutSystemOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ManuallyShutSystemOFF &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_ForceDiasble
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>MenuRenderProcess</STRONG> (Thumb, 1520 bytes, Stack size 40 bytes, menusystem.o(i.MenuRenderProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MenuRenderProcess &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>OverChargeDetectModule</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, overchargedetect.o(i.OverChargeDetectModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OverChargeDetectModule &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdateFullVoltage
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>PCA9536_SetIODirection</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pca9536.o(i.PCA9536_SetIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCA9536_SetIODirection &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
</UL>

<P><STRONG><a name="[136]"></a>PCA9536_SetIOPolarity</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pca9536.o(i.PCA9536_SetIOPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCA9536_SetIOPolarity &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
</UL>

<P><STRONG><a name="[135]"></a>PCA9536_SetIOState</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pca9536.o(i.PCA9536_SetIOState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCA9536_SetIOState &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_ForceDiasble
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
</UL>

<P><STRONG><a name="[27]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.PDMA_CH0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_CH0_1_IRQHandler &rArr; PDMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetFlagStatus
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b5]"></a>PDMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ht32f5xxxx_pdma.o(i.PDMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PDMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_CH0_1_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>PDMA_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_Config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
</UL>

<P><STRONG><a name="[1ad]"></a>PDMA_EnaCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
</UL>

<P><STRONG><a name="[1c1]"></a>PDMA_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_CH0_1_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>PDMA_IntConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32f5xxxx_pdma.o(i.PDMA_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
</UL>

<P><STRONG><a name="[17f]"></a>PMBUS_2NPowCalc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_2NPowCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
</UL>

<P><STRONG><a name="[17e]"></a>PMBUS_WordReadWrite</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, pmbus.o(i.PMBUS_WordReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_SetAlertRegister
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_QueueIfGaugeCanReady
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
</UL>

<P><STRONG><a name="[1c3]"></a>POR_ReadCapData</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, captestmgmt.o(i.POR_ReadCapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = POR_ReadCapData &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCapDataCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>PassWordMenuRender</STRONG> (Thumb, 716 bytes, Stack size 48 bytes, enterpasswordmenu.o(i.PassWordMenuRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PassWordMenuRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset1_8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPassWhenSecuEnter
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyPassWhenAdvMode
</UL>

<P><STRONG><a name="[76]"></a>PasswordEnterInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, enterpasswordmenu.o(i.PasswordEnterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PasswordEnterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset1_8
</UL>
<BR>[Address Reference Count : 2]<UL><LI> entersecusettingmenu.o(.constdata)
<LI> enteradvancedmodemenu.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>PostScreenInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, postscreen.o(i.PostScreenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PostScreenInit &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>PowerMgmtSetup</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pmsetup.o(i.PowerMgmtSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PowerMgmtSetup &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>PowermanagementSleepControl</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pmsetup.o(i.PowermanagementSleepControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PowermanagementSleepControl &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_ForceDiasble
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>PreISetMenuDummy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, prechargecurrentsetmenu.o(i.PreISetMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PreISetMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prechargecurrentsetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>PrepareAboutRender</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aboutmenu.o(i.PrepareAboutRender))
<BR>[Address Reference Count : 1]<UL><LI> aboutmenu.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>PreparePDO20VStr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pdosetmenu.o(i.PreparePDO20VStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PreparePDO20VStr &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdosetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>PushDefaultResultToVBat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, instantcaptest.o(i.PushDefaultResultToVBat))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>RSTCU_GetResetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_rstcu.o(i.RSTCU_GetResetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
</UL>

<P><STRONG><a name="[13e]"></a>RSTCU_PeripReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DeInit
</UL>

<P><STRONG><a name="[1e3]"></a>RTC_LSILoadTrimData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ht32f5xxxx_rtc.o(i.RTC_LSILoadTrimData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_LSILoadTrimData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[95]"></a>ReadBalEnumValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, balsysmenu.o(i.ReadBalEnumValue))
<BR>[Address Reference Count : 1]<UL><LI> balsysmenu.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ReadDisplayEnumValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, displaydirmenu.o(i.ReadDisplayEnumValue))
<BR>[Address Reference Count : 1]<UL><LI> displaydirmenu.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ReadIStopEnumValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istopmenu.o(i.ReadIStopEnumValue))
<BR>[Address Reference Count : 2]<UL><LI> istopstdmenu.o(.constdata)
<LI> istopmenu.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>ReadLVEnumValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lvsetmenu.o(i.ReadLVEnumValue))
<BR>[Address Reference Count : 1]<UL><LI> lvsetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ReadMaxVPDEnumValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maxvpdconfigmenu.o(i.ReadMaxVPDEnumValue))
<BR>[Address Reference Count : 1]<UL><LI> maxvpdconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>ReadPWREnumValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chargepowermenu.o(i.ReadPWREnumValue))
<BR>[Address Reference Count : 2]<UL><LI> chargepowermenu.o(.constdata)
<LI> chgpowerwithoutepr.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ReadRechargeEnumValue</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, vrechargemenu.o(i.ReadRechargeEnumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ReadRechargeEnumValue &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vrechargemenu.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ReadTCSourceEnumValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, typeccalibrationsource.o(i.ReadTCSourceEnumValue))
<BR>[Address Reference Count : 1]<UL><LI> typeccalibrationsource.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>RenderMenuBG</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, menusystem.o(i.RenderMenuBG))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCapHisGUI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayResetOK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuGUIHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlertMsg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccEnteredCapStart
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeCResetRender
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
</UL>

<P><STRONG><a name="[1b8]"></a>RenderTypeCState</STRONG> (Thumb, 974 bytes, Stack size 32 bytes, largemainmenu.o(i.RenderTypeCState))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RenderTypeCState &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenuRenderProc
</UL>

<P><STRONG><a name="[58]"></a>ResetCTest</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, restorefactorysetmenu.o(i.ResetCTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ResetCTest &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> restorefactorysetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>ResetCapTestSystem</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, captestmenu.o(i.ResetCapTestSystem))
<BR>[Address Reference Count : 1]<UL><LI> captestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ResetChipMenuState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, viewchipstatemenu.o(i.ResetChipMenuState))
<BR>[Address Reference Count : 1]<UL><LI> viewchipstatemenu.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>ResetColHisMenuToUpper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, columgaugeviewmenu.o(i.ResetColHisMenuToUpper))
<BR>[Address Reference Count : 1]<UL><LI> columgaugeviewmenu.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ResetColumData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, resetconfigmenu.o(i.ResetColumData))
<BR>[Address Reference Count : 1]<UL><LI> resetconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ResetColumGauge</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, restorefactorysetmenu.o(i.ResetColumGauge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ResetColumGauge &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> restorefactorysetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>ResetHisMenuToUpper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, displaylastctestmenu.o(i.ResetHisMenuToUpper))
<BR>[Address Reference Count : 1]<UL><LI> displaylastctestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ResetManuBalModule</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, manustartbalancemenu.o(i.ResetManuBalModule))
<BR>[Address Reference Count : 1]<UL><LI> manustartbalancemenu.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>ResetRunTimeLogArea</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, logsystem.o(i.ResetRunTimeLogArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ResetRunTimeLogArea &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayResetOK
</UL>

<P><STRONG><a name="[57]"></a>ResetSysCfg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, restorefactorysetmenu.o(i.ResetSysCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ResetSysCfg &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> restorefactorysetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>RestoreDefaultConfig</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, config.o(i.RestoreDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RestoreDefaultConfig &rArr; LoadDefaultConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectResetConfig
</UL>

<P><STRONG><a name="[64]"></a>ReturnFromIset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setchargecurrentmenu.o(i.ReturnFromIset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnFromIset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setchargecurrentmenu.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ReturnFromPreIset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, prechargecurrentsetmenu.o(i.ReturnFromPreIset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnFromPreIset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prechargecurrentsetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ReturnFromRSTMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, restorefactorysetmenu.o(i.ReturnFromRSTMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnFromRSTMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> restorefactorysetmenu.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ReturnFromVset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargevoltset.o(i.ReturnFromVset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnFromVset &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargevoltset.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>ReturnToMainMenu</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, setttingmainmenu.o(i.ReturnToMainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReturnToMainMenu &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetIBatLIMBaseOnSysCfg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfConfigIsSame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ReturnToMainSetMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargingsystemmenu.o(i.ReturnToMainSetMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnToMainSetMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> chargingsystemmenu.o(.constdata)
<LI> typecgaugeconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ReturnToTCCalMenu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typeccalibrationset.o(i.ReturnToTCCalMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReturnToTCCalMenu &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typeccalibrationset.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>RunLogModule_POR</STRONG> (Thumb, 626 bytes, Stack size 224 bytes, logsystem.o(i.RunLogModule_POR))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = RunLogModule_POR &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Process
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackDetectInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLogContentCRC32
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLatestEntryViaIncCode
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>SMBUS_Init</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, i2cdrv.o(i.SMBUS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMBUS_Init &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
</UL>

<P><STRONG><a name="[1b2]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ht32f5xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
</UL>

<P><STRONG><a name="[1ab]"></a>SPI_PDMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_PDMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
</UL>

<P><STRONG><a name="[1b3]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
</UL>

<P><STRONG><a name="[1a7]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[1b7]"></a>SPI_SetClockPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SetClockPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a8]"></a>SPI_SetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHoriLine
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1f6]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1f3]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
</UL>

<P><STRONG><a name="[5f]"></a>SelectResetCTest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, resetconfigmenu.o(i.SelectResetCTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SelectResetCTest &rArr; WriteCapData &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHistoryData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCapData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resetconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>SelectResetConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, resetconfigmenu.o(i.SelectResetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SelectResetConfig &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resetconfigmenu.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>SelfTestErrorHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, selftesterrorhandle.o(i.SelfTestErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SelfTestErrorHandler &rArr; LCD_ShowChinese &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_TIMCallback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
</UL>

<P><STRONG><a name="[37]"></a>SendTCResetCommand</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.SendTCResetCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendTCResetCommand &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>SetDebugPortState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, flashprot.o(i.SetDebugPortState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetDebugPortState &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuKeyProc
</UL>

<P><STRONG><a name="[38]"></a>SetDisplayDir</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.SetDisplayDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetDisplayDir &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>SetScreenDirection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, screendirset.o(i.SetScreenDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetScreenDirection &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedDisplayEnumValue
</UL>

<P><STRONG><a name="[61]"></a>ShowCapHisGUI</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, displaylastctestmenu.o(i.ShowCapHisGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ShowCapHisGUI &rArr; ShowUpperPart &rArr; ShowTimeCode &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaylastctestmenu.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ShowChipInfo</STRONG> (Thumb, 1424 bytes, Stack size 56 bytes, viewchipstatemenu.o(i.ShowChipInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ShowChipInfo &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9536_SetIOState
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadChipState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetRecvPDO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetCurrentPeakCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> viewchipstatemenu.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ShowChipKeyHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, viewchipstatemenu.o(i.ShowChipKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ShowChipKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> viewchipstatemenu.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ShowColHisGUI</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, columgaugeviewmenu.o(i.ShowColHisGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ShowColHisGUI &rArr; ShowTimeCode &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTimeCode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> columgaugeviewmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>ShowLowerPart</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, displaylastctestmenu.o(i.ShowLowerPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ShowLowerPart &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCapHisGUI
</UL>

<P><STRONG><a name="[12b]"></a>ShowPostInfo</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, postscreen.o(i.ShowPostInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>ShowTimeCode</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, menusystem.o(i.ShowTimeCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ShowTimeCode &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
</UL>

<P><STRONG><a name="[1d4]"></a>ShowUpperPart</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, displaylastctestmenu.o(i.ShowUpperPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ShowUpperPart &rArr; ShowTimeCode &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTimeCode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCapHisGUI
</UL>

<P><STRONG><a name="[1be]"></a>ShutSysOFF</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pmsetup.o(i.ShutSysOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShutSysOFF &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_ForceDiasble
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuallyShutSystemOFF
</UL>

<P><STRONG><a name="[1d6]"></a>SideKey_Init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, key.o(i.SideKey_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SideKey_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>SideKey_IntCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, key.o(i.SideKey_IntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SideKey_IntCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeFlag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>SideKey_LogicHandler</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, key.o(i.SideKey_LogicHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SideKey_LogicHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>SideKey_TIMCallback</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, key.o(i.SideKey_TIMCallback))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>SwitchingMenu</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, menusystem.o(i.SwitchingMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredInstantCapTest
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChipKeyHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColHisKeyHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFromVset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFromPreIset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFromIset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapHisKeyHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToResetMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFromRSTMenu
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysCfg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetColumGauge
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCTest
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestKeyHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainSetMenu
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterRechargeSetMenu
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPreChargeIset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterMaxVPDMenu
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIstopMenu
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIChargeSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterChgVsetMenu
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewColData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewChipState
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayDir
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTCResetCommand
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTypeCGaugeConfig
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterSecuCfg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterResetFactory
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPSet
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPDOConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterManuBal
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLVSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterGUIPref
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterDisMgmt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterChgMgmt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterChargeTest
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCTHistory
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterBalCfg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmu
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAbout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActOneShotTest
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveDisMgmtMenu
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedLVEnumValue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedPWREnumValue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdvModeProc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuKeyProcess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToTCCalMenu
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedTCSourceEnumValue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTCVCAL
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTCICAL
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterDsourceSel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuKeyHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuFSMProcess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedBalEnumValue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFromGUIPref
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenuRenderProc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMainMenuKeyProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedMaxVPDEnumValue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveSafeAlmMenu
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedIStopEnumValue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedRechargeEnumValue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveICTMenu
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedDisplayEnumValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeCResetKeyHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterMenuKeyProc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFromTset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuKeyProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterSecuProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToEasySetup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdvMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFromEsetupToMainMenu
</UL>

<P><STRONG><a name="[1dc]"></a>SysOverHeatProt</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ip2366_init.o(i.SysOverHeatProt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysOverHeatProt &rArr; WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfiguration
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdataChargePower
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>TCResetFSM</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, typecconnreset.o(i.TCResetFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TCResetFSM &rArr; IP2366_SetTypeCRole &rArr; IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ClearOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>TM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
</UL>

<P><STRONG><a name="[16f]"></a>TM_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>TM_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
</UL>

<P><STRONG><a name="[167]"></a>TM_TimeBaseInit</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
</UL>

<P><STRONG><a name="[7c]"></a>TSetMenuDummy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, otptempset.o(i.TSetMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TSetMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otptempset.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>TypeCResetKeyHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, typecconnreset.o(i.TypeCResetKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TypeCResetKeyHandler &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typecconnreset.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>TypeCResetRender</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, typecconnreset.o(i.TypeCResetRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TypeCResetRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderMenuBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typecconnreset.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>UpdataRunTimeLog</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, logsystem.o(i.UpdataRunTimeLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UpdataRunTimeLog &rArr; WriteRuntimeLogToROM &rArr; ForceWriteRuntimelog &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_QueryCurrentStateIsACC
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>UpdateIfSysCanOFF</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, setttingmainmenu.o(i.UpdateIfSysCanOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UpdateIfSysCanOFF &rArr; IP2366_GetChargerState &rArr; IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>VCALMenuDummy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, typeccalibrationset.o(i.VCALMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = VCALMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typeccalibrationset.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>VSetMenuDummy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chargevoltset.o(i.VSetMenuDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = VSetMenuDummy &rArr; IntEditHandler &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chargevoltset.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>VerifyPassWhenAdvMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enteradvancedmodemenu.o(i.VerifyPassWhenAdvMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VerifyPassWhenAdvMode &rArr; PassWordMenuRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enteradvancedmodemenu.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>VerifyPassWhenSecuEnter</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, entersecusettingmenu.o(i.VerifyPassWhenSecuEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VerifyPassWhenSecuEnter &rArr; PassWordMenuRender &rArr; RenderMenuBG &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entersecusettingmenu.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>ViewChipState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.ViewChipState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ViewChipState &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>ViewColData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, setttingmainmenu.o(i.ViewColData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ViewColData &rArr; SwitchingMenu &rArr; LCD_Fill &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchingMenu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easysetupmenu.o(.constdata)
<LI> setttingmainmenu.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>WDT_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e1]"></a>WDT_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_wdt.o(i.WDT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1ea]"></a>WDT_ProtectCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_ProtectCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e8]"></a>WDT_ResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_ResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1ca]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
</UL>

<P><STRONG><a name="[1e7]"></a>WDT_SetDeltaValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_SetDeltaValue))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e5]"></a>WDT_SetPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e6]"></a>WDT_SetReloadValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e4]"></a>WDT_SourceConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_SourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
</UL>

<P><STRONG><a name="[1e2]"></a>WatchDog_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, watchdog.o(i.WatchDog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WatchDog_Init &rArr; WDT_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSILoadTrimData
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SourceConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetReloadValue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetPrescaler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetDeltaValue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ResetCmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ProtectCmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DeInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>WriteCapData</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, captestmgmt.o(i.WriteCapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteCapData &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCapDataCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestFSMHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectResetCTest
</UL>

<P><STRONG><a name="[12c]"></a>WriteConfiguration</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, config.o(i.WriteConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WriteConfiguration &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcROMCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverChargeDetectModule
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestFSMHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreenDirection
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectResetConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToMainMenu
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuallyShutSystemOFF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FedMaxVPDEnumValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableICTestMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFromEsetupToMainMenu
</UL>

<P><STRONG><a name="[132]"></a>WriteRuntimeLogToROM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, logsystem.o(i.WriteRuntimeLogToROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteRuntimeLogToROM &rArr; ForceWriteRuntimelog &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuRenderHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBalMenuKeyHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalMenuFSMProcess
</UL>

<P><STRONG><a name="[f8]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[1c6]"></a>__ARM_common_memset1_8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, enterpasswordmenu.o(i.__ARM_common_memset1_8))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordEnterInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordMenuRender
</UL>

<P><STRONG><a name="[ee]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1eb]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1ec]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1ed]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1ef]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1f1]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[ce]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[158]"></a>delay_Second</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, delay.o(i.delay_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_Second
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
</UL>

<P><STRONG><a name="[1f4]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>delay_ms</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutSysOFF
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366StallRestore
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_WriteSecuSct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReInitBasedOnConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_INIT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuallyShutSystemOFF
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[108]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_WriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadReg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetFirmwareTimeStamp
</UL>

<P><STRONG><a name="[145]"></a>iroundf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lineartabop.o(i.iroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iroundf &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUpperPart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
</UL>

<P><STRONG><a name="[113]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[c4]"></a>main</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = main &rArr; RunLogModule_POR &rArr; ShowPostInfo &rArr; LCD_ShowHybridString &rArr; LCD_ShowChinese12x12 &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIfSysCanOFF
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCResetFSM
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_TIMCallback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDebugPortState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushDefaultResultToVBat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowermanagementSleepControl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMgmtSetup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostScreenInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POR_ReadCapData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverChargeDetectModule
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuRenderProcess
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickIP2366ToWakeUp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditMenuKeyEffHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReConfigOutWhenTypeCOFF
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PreInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_PostInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPPowerGuage_Start
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDelayHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredInstantCapTest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectIfIP2366Reset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfHBTIMStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForFlashLock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestFSMHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceMgmt_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttackTimeCounter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyScreenDirection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c2]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
</UL>

<P><STRONG><a name="[1fc]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[be]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[200]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[201]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
</UL>

<P><STRONG><a name="[202]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_IOMgmt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[204]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPostInfo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_Telem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestFSMHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusInformation
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestGUIHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuRenderProcess
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderTypeCState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterAdapterEmulation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterEmuRender
</UL>

<P><STRONG><a name="[244]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataRunTimeLog
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTestAverageACC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowLowerPart
</UL>

<P><STRONG><a name="[205]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
</UL>

<P><STRONG><a name="[206]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOverHeatProt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverChargeDetectModule
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEditHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
</UL>

<P><STRONG><a name="[208]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[ba]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>LCD_DrawHoriLine</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, lcd.o(i.LCD_DrawHoriLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DrawHoriLine &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMACmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[1ae]"></a>LCD_DrawVertLine</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lcd.o(i.LCD_DrawVertLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DrawVertLine &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDataLength
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMACmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[183]"></a>IP2366_ReadReg</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IP2366_ReadReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_getCurrentChargeParam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdataChargePower
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetVLowVolt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetReChargeParam
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetPDOBroadCast
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetICCMax
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ReadChipState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVRecharge
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetVBUSState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetRecvPDO
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetIfInputConnected
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetCurrentPeakCurrent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_GetChargerState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_DetectIfPresent
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_DetectIfChipReset
</UL>

<P><STRONG><a name="[182]"></a>IP2366_WriteReg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ip2366_reg.o(i.IP2366_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IP2366_WriteReg &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdateFullVoltage
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_UpdataChargePower
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetVLowVolt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetTypeCRole
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetReChargeParam
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetPDOBroadCast
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOutputState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetOTPSign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetInputState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_SetICCMax
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_EnableDCDC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2366_ClearOCFlag
</UL>

<P><STRONG><a name="[162]"></a>DisplayAh</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, columgaugeviewmenu.o(i.DisplayAh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DisplayAh &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
</UL>

<P><STRONG><a name="[163]"></a>DisplayCapacity</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, columgaugeviewmenu.o(i.DisplayCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DisplayCapacity &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowColHisGUI
</UL>

<P><STRONG><a name="[11e]"></a>ColorTextGen</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, aboutmenu.o(i.ColorTextGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ColorTextGen
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AboutMenuRender
</UL>

<P><STRONG><a name="[1ba]"></a>LargeMenu_DisplayAh</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, largemainmenu.o(i.LargeMenu_DisplayAh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LargeMenu_DisplayAh &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
</UL>

<P><STRONG><a name="[1bb]"></a>LargeMenu_DisplayWh</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, largemainmenu.o(i.LargeMenu_DisplayWh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LargeMenu_DisplayWh &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderBattState
</UL>

<P><STRONG><a name="[1b9]"></a>RenderBattState</STRONG> (Thumb, 1516 bytes, Stack size 40 bytes, largemainmenu.o(i.RenderBattState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RenderBattState &rArr; LargeMenu_DisplayWh &rArr; LCD_ShowFloatNum1 &rArr; LCD_ShowChar &rArr; LCD_Address_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iroundf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowHybridString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese12x12
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayWh
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenu_DisplayAh
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeMenuRenderProc
</UL>

<P><STRONG><a name="[1cd]"></a>FindLatestEntryViaIncCode</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, logsystem.o(i.FindLatestEntryViaIncCode))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
</UL>

<P><STRONG><a name="[d8]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d7]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[207]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[203]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[e8]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[fa]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[100]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f2]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f1]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<HR></body></html>
